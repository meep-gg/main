// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: gateway/lol/summoner/v1/summoner.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v1 "meep.gg/protos/scylla/lol/summoner/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewaySummonerServiceClient is the client API for GatewaySummonerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewaySummonerServiceClient interface {
	GetSummoner(ctx context.Context, in *GatewaySummonerReq, opts ...grpc.CallOption) (*v1.ScyllaSummoner, error)
	UpdateSummoner(ctx context.Context, in *GatewaySummonerReq, opts ...grpc.CallOption) (*v1.ScyllaSummoner, error)
}

type gatewaySummonerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewaySummonerServiceClient(cc grpc.ClientConnInterface) GatewaySummonerServiceClient {
	return &gatewaySummonerServiceClient{cc}
}

func (c *gatewaySummonerServiceClient) GetSummoner(ctx context.Context, in *GatewaySummonerReq, opts ...grpc.CallOption) (*v1.ScyllaSummoner, error) {
	out := new(v1.ScyllaSummoner)
	err := c.cc.Invoke(ctx, "/gateway.lol.summoner.v1.GatewaySummonerService/GetSummoner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewaySummonerServiceClient) UpdateSummoner(ctx context.Context, in *GatewaySummonerReq, opts ...grpc.CallOption) (*v1.ScyllaSummoner, error) {
	out := new(v1.ScyllaSummoner)
	err := c.cc.Invoke(ctx, "/gateway.lol.summoner.v1.GatewaySummonerService/UpdateSummoner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewaySummonerServiceServer is the server API for GatewaySummonerService service.
// All implementations must embed UnimplementedGatewaySummonerServiceServer
// for forward compatibility
type GatewaySummonerServiceServer interface {
	GetSummoner(context.Context, *GatewaySummonerReq) (*v1.ScyllaSummoner, error)
	UpdateSummoner(context.Context, *GatewaySummonerReq) (*v1.ScyllaSummoner, error)
	mustEmbedUnimplementedGatewaySummonerServiceServer()
}

// UnimplementedGatewaySummonerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGatewaySummonerServiceServer struct {
}

func (UnimplementedGatewaySummonerServiceServer) GetSummoner(context.Context, *GatewaySummonerReq) (*v1.ScyllaSummoner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummoner not implemented")
}
func (UnimplementedGatewaySummonerServiceServer) UpdateSummoner(context.Context, *GatewaySummonerReq) (*v1.ScyllaSummoner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSummoner not implemented")
}
func (UnimplementedGatewaySummonerServiceServer) mustEmbedUnimplementedGatewaySummonerServiceServer() {
}

// UnsafeGatewaySummonerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewaySummonerServiceServer will
// result in compilation errors.
type UnsafeGatewaySummonerServiceServer interface {
	mustEmbedUnimplementedGatewaySummonerServiceServer()
}

func RegisterGatewaySummonerServiceServer(s grpc.ServiceRegistrar, srv GatewaySummonerServiceServer) {
	s.RegisterService(&GatewaySummonerService_ServiceDesc, srv)
}

func _GatewaySummonerService_GetSummoner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewaySummonerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewaySummonerServiceServer).GetSummoner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.lol.summoner.v1.GatewaySummonerService/GetSummoner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewaySummonerServiceServer).GetSummoner(ctx, req.(*GatewaySummonerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewaySummonerService_UpdateSummoner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewaySummonerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewaySummonerServiceServer).UpdateSummoner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.lol.summoner.v1.GatewaySummonerService/UpdateSummoner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewaySummonerServiceServer).UpdateSummoner(ctx, req.(*GatewaySummonerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewaySummonerService_ServiceDesc is the grpc.ServiceDesc for GatewaySummonerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewaySummonerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.lol.summoner.v1.GatewaySummonerService",
	HandlerType: (*GatewaySummonerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummoner",
			Handler:    _GatewaySummonerService_GetSummoner_Handler,
		},
		{
			MethodName: "UpdateSummoner",
			Handler:    _GatewaySummonerService_UpdateSummoner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/lol/summoner/v1/summoner.proto",
}
