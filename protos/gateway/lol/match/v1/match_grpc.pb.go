// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: gateway/lol/match/v1/match.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayMatchServiceClient is the client API for GatewayMatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayMatchServiceClient interface {
	UpdatePlayerMatches(ctx context.Context, in *GatewayMatchPlayerReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gatewayMatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayMatchServiceClient(cc grpc.ClientConnInterface) GatewayMatchServiceClient {
	return &gatewayMatchServiceClient{cc}
}

func (c *gatewayMatchServiceClient) UpdatePlayerMatches(ctx context.Context, in *GatewayMatchPlayerReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gateway.lol.match.v1.GatewayMatchService/UpdatePlayerMatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayMatchServiceServer is the server API for GatewayMatchService service.
// All implementations must embed UnimplementedGatewayMatchServiceServer
// for forward compatibility
type GatewayMatchServiceServer interface {
	UpdatePlayerMatches(context.Context, *GatewayMatchPlayerReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedGatewayMatchServiceServer()
}

// UnimplementedGatewayMatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayMatchServiceServer struct {
}

func (UnimplementedGatewayMatchServiceServer) UpdatePlayerMatches(context.Context, *GatewayMatchPlayerReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayerMatches not implemented")
}
func (UnimplementedGatewayMatchServiceServer) mustEmbedUnimplementedGatewayMatchServiceServer() {}

// UnsafeGatewayMatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayMatchServiceServer will
// result in compilation errors.
type UnsafeGatewayMatchServiceServer interface {
	mustEmbedUnimplementedGatewayMatchServiceServer()
}

func RegisterGatewayMatchServiceServer(s grpc.ServiceRegistrar, srv GatewayMatchServiceServer) {
	s.RegisterService(&GatewayMatchService_ServiceDesc, srv)
}

func _GatewayMatchService_UpdatePlayerMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayMatchPlayerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayMatchServiceServer).UpdatePlayerMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.lol.match.v1.GatewayMatchService/UpdatePlayerMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayMatchServiceServer).UpdatePlayerMatches(ctx, req.(*GatewayMatchPlayerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayMatchService_ServiceDesc is the grpc.ServiceDesc for GatewayMatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayMatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.lol.match.v1.GatewayMatchService",
	HandlerType: (*GatewayMatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePlayerMatches",
			Handler:    _GatewayMatchService_UpdatePlayerMatches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/lol/match/v1/match.proto",
}
