// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: gateway/riot/account/v1/account.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v1 "meep.gg/protos/scylla/riot/account/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayAccountServiceClient is the client API for GatewayAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayAccountServiceClient interface {
	GetAccount(ctx context.Context, in *GatewayAccountReq, opts ...grpc.CallOption) (*v1.ScyllaAccount, error)
	UpdateAccount(ctx context.Context, in *GatewayAccountReq, opts ...grpc.CallOption) (*v1.ScyllaAccount, error)
}

type gatewayAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayAccountServiceClient(cc grpc.ClientConnInterface) GatewayAccountServiceClient {
	return &gatewayAccountServiceClient{cc}
}

func (c *gatewayAccountServiceClient) GetAccount(ctx context.Context, in *GatewayAccountReq, opts ...grpc.CallOption) (*v1.ScyllaAccount, error) {
	out := new(v1.ScyllaAccount)
	err := c.cc.Invoke(ctx, "/gateway.riot.account.v1.GatewayAccountService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccountServiceClient) UpdateAccount(ctx context.Context, in *GatewayAccountReq, opts ...grpc.CallOption) (*v1.ScyllaAccount, error) {
	out := new(v1.ScyllaAccount)
	err := c.cc.Invoke(ctx, "/gateway.riot.account.v1.GatewayAccountService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayAccountServiceServer is the server API for GatewayAccountService service.
// All implementations must embed UnimplementedGatewayAccountServiceServer
// for forward compatibility
type GatewayAccountServiceServer interface {
	GetAccount(context.Context, *GatewayAccountReq) (*v1.ScyllaAccount, error)
	UpdateAccount(context.Context, *GatewayAccountReq) (*v1.ScyllaAccount, error)
	mustEmbedUnimplementedGatewayAccountServiceServer()
}

// UnimplementedGatewayAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayAccountServiceServer struct {
}

func (UnimplementedGatewayAccountServiceServer) GetAccount(context.Context, *GatewayAccountReq) (*v1.ScyllaAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedGatewayAccountServiceServer) UpdateAccount(context.Context, *GatewayAccountReq) (*v1.ScyllaAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedGatewayAccountServiceServer) mustEmbedUnimplementedGatewayAccountServiceServer() {}

// UnsafeGatewayAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayAccountServiceServer will
// result in compilation errors.
type UnsafeGatewayAccountServiceServer interface {
	mustEmbedUnimplementedGatewayAccountServiceServer()
}

func RegisterGatewayAccountServiceServer(s grpc.ServiceRegistrar, srv GatewayAccountServiceServer) {
	s.RegisterService(&GatewayAccountService_ServiceDesc, srv)
}

func _GatewayAccountService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccountServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.riot.account.v1.GatewayAccountService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccountServiceServer).GetAccount(ctx, req.(*GatewayAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccountService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccountServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.riot.account.v1.GatewayAccountService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccountServiceServer).UpdateAccount(ctx, req.(*GatewayAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayAccountService_ServiceDesc is the grpc.ServiceDesc for GatewayAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.riot.account.v1.GatewayAccountService",
	HandlerType: (*GatewayAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _GatewayAccountService_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _GatewayAccountService_UpdateAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/riot/account/v1/account.proto",
}
