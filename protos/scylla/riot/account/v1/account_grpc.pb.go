// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: scylla/riot/account/v1/account.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScyllaAccountServiceClient is the client API for ScyllaAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScyllaAccountServiceClient interface {
	GetAccount(ctx context.Context, in *ScyllaAccountReq, opts ...grpc.CallOption) (*ScyllaAccount, error)
	UpsertAccount(ctx context.Context, in *ScyllaUpsertAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAccount(ctx context.Context, in *ScyllaAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type scyllaAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScyllaAccountServiceClient(cc grpc.ClientConnInterface) ScyllaAccountServiceClient {
	return &scyllaAccountServiceClient{cc}
}

func (c *scyllaAccountServiceClient) GetAccount(ctx context.Context, in *ScyllaAccountReq, opts ...grpc.CallOption) (*ScyllaAccount, error) {
	out := new(ScyllaAccount)
	err := c.cc.Invoke(ctx, "/scylla.riot.account.v1.ScyllaAccountService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scyllaAccountServiceClient) UpsertAccount(ctx context.Context, in *ScyllaUpsertAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scylla.riot.account.v1.ScyllaAccountService/UpsertAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scyllaAccountServiceClient) DeleteAccount(ctx context.Context, in *ScyllaAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scylla.riot.account.v1.ScyllaAccountService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScyllaAccountServiceServer is the server API for ScyllaAccountService service.
// All implementations must embed UnimplementedScyllaAccountServiceServer
// for forward compatibility
type ScyllaAccountServiceServer interface {
	GetAccount(context.Context, *ScyllaAccountReq) (*ScyllaAccount, error)
	UpsertAccount(context.Context, *ScyllaUpsertAccountReq) (*emptypb.Empty, error)
	DeleteAccount(context.Context, *ScyllaAccountReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedScyllaAccountServiceServer()
}

// UnimplementedScyllaAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScyllaAccountServiceServer struct {
}

func (UnimplementedScyllaAccountServiceServer) GetAccount(context.Context, *ScyllaAccountReq) (*ScyllaAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedScyllaAccountServiceServer) UpsertAccount(context.Context, *ScyllaUpsertAccountReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAccount not implemented")
}
func (UnimplementedScyllaAccountServiceServer) DeleteAccount(context.Context, *ScyllaAccountReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedScyllaAccountServiceServer) mustEmbedUnimplementedScyllaAccountServiceServer() {}

// UnsafeScyllaAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScyllaAccountServiceServer will
// result in compilation errors.
type UnsafeScyllaAccountServiceServer interface {
	mustEmbedUnimplementedScyllaAccountServiceServer()
}

func RegisterScyllaAccountServiceServer(s grpc.ServiceRegistrar, srv ScyllaAccountServiceServer) {
	s.RegisterService(&ScyllaAccountService_ServiceDesc, srv)
}

func _ScyllaAccountService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaAccountServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.riot.account.v1.ScyllaAccountService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaAccountServiceServer).GetAccount(ctx, req.(*ScyllaAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScyllaAccountService_UpsertAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaUpsertAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaAccountServiceServer).UpsertAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.riot.account.v1.ScyllaAccountService/UpsertAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaAccountServiceServer).UpsertAccount(ctx, req.(*ScyllaUpsertAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScyllaAccountService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaAccountServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.riot.account.v1.ScyllaAccountService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaAccountServiceServer).DeleteAccount(ctx, req.(*ScyllaAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ScyllaAccountService_ServiceDesc is the grpc.ServiceDesc for ScyllaAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScyllaAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scylla.riot.account.v1.ScyllaAccountService",
	HandlerType: (*ScyllaAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _ScyllaAccountService_GetAccount_Handler,
		},
		{
			MethodName: "UpsertAccount",
			Handler:    _ScyllaAccountService_UpsertAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _ScyllaAccountService_DeleteAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scylla/riot/account/v1/account.proto",
}
