// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: scylla/lol/league/v1/league.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScyllaLeagueServiceClient is the client API for ScyllaLeagueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScyllaLeagueServiceClient interface {
	GetLeague(ctx context.Context, in *ScyllaLeagueReq, opts ...grpc.CallOption) (*ScyllaLeagueEntry, error)
	GetLeagues(ctx context.Context, in *ScyllaLeagueReq, opts ...grpc.CallOption) (*ScyllaLeagueEntries, error)
	UpsertLeague(ctx context.Context, in *ScyllaUpsertLeagueReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteLeague(ctx context.Context, in *ScyllaLeagueReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type scyllaLeagueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScyllaLeagueServiceClient(cc grpc.ClientConnInterface) ScyllaLeagueServiceClient {
	return &scyllaLeagueServiceClient{cc}
}

func (c *scyllaLeagueServiceClient) GetLeague(ctx context.Context, in *ScyllaLeagueReq, opts ...grpc.CallOption) (*ScyllaLeagueEntry, error) {
	out := new(ScyllaLeagueEntry)
	err := c.cc.Invoke(ctx, "/scylla.lol.league.v1.ScyllaLeagueService/GetLeague", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scyllaLeagueServiceClient) GetLeagues(ctx context.Context, in *ScyllaLeagueReq, opts ...grpc.CallOption) (*ScyllaLeagueEntries, error) {
	out := new(ScyllaLeagueEntries)
	err := c.cc.Invoke(ctx, "/scylla.lol.league.v1.ScyllaLeagueService/GetLeagues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scyllaLeagueServiceClient) UpsertLeague(ctx context.Context, in *ScyllaUpsertLeagueReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scylla.lol.league.v1.ScyllaLeagueService/UpsertLeague", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scyllaLeagueServiceClient) DeleteLeague(ctx context.Context, in *ScyllaLeagueReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scylla.lol.league.v1.ScyllaLeagueService/DeleteLeague", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScyllaLeagueServiceServer is the server API for ScyllaLeagueService service.
// All implementations must embed UnimplementedScyllaLeagueServiceServer
// for forward compatibility
type ScyllaLeagueServiceServer interface {
	GetLeague(context.Context, *ScyllaLeagueReq) (*ScyllaLeagueEntry, error)
	GetLeagues(context.Context, *ScyllaLeagueReq) (*ScyllaLeagueEntries, error)
	UpsertLeague(context.Context, *ScyllaUpsertLeagueReq) (*emptypb.Empty, error)
	DeleteLeague(context.Context, *ScyllaLeagueReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedScyllaLeagueServiceServer()
}

// UnimplementedScyllaLeagueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScyllaLeagueServiceServer struct {
}

func (UnimplementedScyllaLeagueServiceServer) GetLeague(context.Context, *ScyllaLeagueReq) (*ScyllaLeagueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeague not implemented")
}
func (UnimplementedScyllaLeagueServiceServer) GetLeagues(context.Context, *ScyllaLeagueReq) (*ScyllaLeagueEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeagues not implemented")
}
func (UnimplementedScyllaLeagueServiceServer) UpsertLeague(context.Context, *ScyllaUpsertLeagueReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLeague not implemented")
}
func (UnimplementedScyllaLeagueServiceServer) DeleteLeague(context.Context, *ScyllaLeagueReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeague not implemented")
}
func (UnimplementedScyllaLeagueServiceServer) mustEmbedUnimplementedScyllaLeagueServiceServer() {}

// UnsafeScyllaLeagueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScyllaLeagueServiceServer will
// result in compilation errors.
type UnsafeScyllaLeagueServiceServer interface {
	mustEmbedUnimplementedScyllaLeagueServiceServer()
}

func RegisterScyllaLeagueServiceServer(s grpc.ServiceRegistrar, srv ScyllaLeagueServiceServer) {
	s.RegisterService(&ScyllaLeagueService_ServiceDesc, srv)
}

func _ScyllaLeagueService_GetLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaLeagueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaLeagueServiceServer).GetLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.league.v1.ScyllaLeagueService/GetLeague",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaLeagueServiceServer).GetLeague(ctx, req.(*ScyllaLeagueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScyllaLeagueService_GetLeagues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaLeagueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaLeagueServiceServer).GetLeagues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.league.v1.ScyllaLeagueService/GetLeagues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaLeagueServiceServer).GetLeagues(ctx, req.(*ScyllaLeagueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScyllaLeagueService_UpsertLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaUpsertLeagueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaLeagueServiceServer).UpsertLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.league.v1.ScyllaLeagueService/UpsertLeague",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaLeagueServiceServer).UpsertLeague(ctx, req.(*ScyllaUpsertLeagueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScyllaLeagueService_DeleteLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaLeagueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaLeagueServiceServer).DeleteLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.league.v1.ScyllaLeagueService/DeleteLeague",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaLeagueServiceServer).DeleteLeague(ctx, req.(*ScyllaLeagueReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ScyllaLeagueService_ServiceDesc is the grpc.ServiceDesc for ScyllaLeagueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScyllaLeagueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scylla.lol.league.v1.ScyllaLeagueService",
	HandlerType: (*ScyllaLeagueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeague",
			Handler:    _ScyllaLeagueService_GetLeague_Handler,
		},
		{
			MethodName: "GetLeagues",
			Handler:    _ScyllaLeagueService_GetLeagues_Handler,
		},
		{
			MethodName: "UpsertLeague",
			Handler:    _ScyllaLeagueService_UpsertLeague_Handler,
		},
		{
			MethodName: "DeleteLeague",
			Handler:    _ScyllaLeagueService_DeleteLeague_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scylla/lol/league/v1/league.proto",
}
