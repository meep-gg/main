// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: scylla/lol/summoner/v1/summoner.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScyllaSummonerServiceClient is the client API for ScyllaSummonerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScyllaSummonerServiceClient interface {
	GetSummoner(ctx context.Context, in *ScyllaSummonerReq, opts ...grpc.CallOption) (*ScyllaSummoner, error)
	UpsertSummoner(ctx context.Context, in *ScyllaUpsertSummonerReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSummoner(ctx context.Context, in *ScyllaSummonerReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type scyllaSummonerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScyllaSummonerServiceClient(cc grpc.ClientConnInterface) ScyllaSummonerServiceClient {
	return &scyllaSummonerServiceClient{cc}
}

func (c *scyllaSummonerServiceClient) GetSummoner(ctx context.Context, in *ScyllaSummonerReq, opts ...grpc.CallOption) (*ScyllaSummoner, error) {
	out := new(ScyllaSummoner)
	err := c.cc.Invoke(ctx, "/scylla.lol.summoner.v1.ScyllaSummonerService/GetSummoner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scyllaSummonerServiceClient) UpsertSummoner(ctx context.Context, in *ScyllaUpsertSummonerReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scylla.lol.summoner.v1.ScyllaSummonerService/UpsertSummoner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scyllaSummonerServiceClient) DeleteSummoner(ctx context.Context, in *ScyllaSummonerReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scylla.lol.summoner.v1.ScyllaSummonerService/DeleteSummoner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScyllaSummonerServiceServer is the server API for ScyllaSummonerService service.
// All implementations must embed UnimplementedScyllaSummonerServiceServer
// for forward compatibility
type ScyllaSummonerServiceServer interface {
	GetSummoner(context.Context, *ScyllaSummonerReq) (*ScyllaSummoner, error)
	UpsertSummoner(context.Context, *ScyllaUpsertSummonerReq) (*emptypb.Empty, error)
	DeleteSummoner(context.Context, *ScyllaSummonerReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedScyllaSummonerServiceServer()
}

// UnimplementedScyllaSummonerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScyllaSummonerServiceServer struct {
}

func (UnimplementedScyllaSummonerServiceServer) GetSummoner(context.Context, *ScyllaSummonerReq) (*ScyllaSummoner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummoner not implemented")
}
func (UnimplementedScyllaSummonerServiceServer) UpsertSummoner(context.Context, *ScyllaUpsertSummonerReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSummoner not implemented")
}
func (UnimplementedScyllaSummonerServiceServer) DeleteSummoner(context.Context, *ScyllaSummonerReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSummoner not implemented")
}
func (UnimplementedScyllaSummonerServiceServer) mustEmbedUnimplementedScyllaSummonerServiceServer() {}

// UnsafeScyllaSummonerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScyllaSummonerServiceServer will
// result in compilation errors.
type UnsafeScyllaSummonerServiceServer interface {
	mustEmbedUnimplementedScyllaSummonerServiceServer()
}

func RegisterScyllaSummonerServiceServer(s grpc.ServiceRegistrar, srv ScyllaSummonerServiceServer) {
	s.RegisterService(&ScyllaSummonerService_ServiceDesc, srv)
}

func _ScyllaSummonerService_GetSummoner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaSummonerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaSummonerServiceServer).GetSummoner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.summoner.v1.ScyllaSummonerService/GetSummoner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaSummonerServiceServer).GetSummoner(ctx, req.(*ScyllaSummonerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScyllaSummonerService_UpsertSummoner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaUpsertSummonerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaSummonerServiceServer).UpsertSummoner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.summoner.v1.ScyllaSummonerService/UpsertSummoner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaSummonerServiceServer).UpsertSummoner(ctx, req.(*ScyllaUpsertSummonerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScyllaSummonerService_DeleteSummoner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaSummonerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaSummonerServiceServer).DeleteSummoner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.summoner.v1.ScyllaSummonerService/DeleteSummoner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaSummonerServiceServer).DeleteSummoner(ctx, req.(*ScyllaSummonerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ScyllaSummonerService_ServiceDesc is the grpc.ServiceDesc for ScyllaSummonerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScyllaSummonerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scylla.lol.summoner.v1.ScyllaSummonerService",
	HandlerType: (*ScyllaSummonerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummoner",
			Handler:    _ScyllaSummonerService_GetSummoner_Handler,
		},
		{
			MethodName: "UpsertSummoner",
			Handler:    _ScyllaSummonerService_UpsertSummoner_Handler,
		},
		{
			MethodName: "DeleteSummoner",
			Handler:    _ScyllaSummonerService_DeleteSummoner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scylla/lol/summoner/v1/summoner.proto",
}
