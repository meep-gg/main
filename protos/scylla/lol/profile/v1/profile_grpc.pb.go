// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: scylla/lol/profile/v1/profile.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScyllaProfileServiceClient is the client API for ScyllaProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScyllaProfileServiceClient interface {
	GetProfile(ctx context.Context, in *ScyllaProfileReq, opts ...grpc.CallOption) (*ScyllaProfile, error)
	UpsertProfile(ctx context.Context, in *ScyllaUpsertProfileReq, opts ...grpc.CallOption) (*ScyllaProfile, error)
	DeleteProfile(ctx context.Context, in *ScyllaProfileReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type scyllaProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScyllaProfileServiceClient(cc grpc.ClientConnInterface) ScyllaProfileServiceClient {
	return &scyllaProfileServiceClient{cc}
}

func (c *scyllaProfileServiceClient) GetProfile(ctx context.Context, in *ScyllaProfileReq, opts ...grpc.CallOption) (*ScyllaProfile, error) {
	out := new(ScyllaProfile)
	err := c.cc.Invoke(ctx, "/scylla.lol.profile.v1.ScyllaProfileService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scyllaProfileServiceClient) UpsertProfile(ctx context.Context, in *ScyllaUpsertProfileReq, opts ...grpc.CallOption) (*ScyllaProfile, error) {
	out := new(ScyllaProfile)
	err := c.cc.Invoke(ctx, "/scylla.lol.profile.v1.ScyllaProfileService/UpsertProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scyllaProfileServiceClient) DeleteProfile(ctx context.Context, in *ScyllaProfileReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scylla.lol.profile.v1.ScyllaProfileService/DeleteProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScyllaProfileServiceServer is the server API for ScyllaProfileService service.
// All implementations must embed UnimplementedScyllaProfileServiceServer
// for forward compatibility
type ScyllaProfileServiceServer interface {
	GetProfile(context.Context, *ScyllaProfileReq) (*ScyllaProfile, error)
	UpsertProfile(context.Context, *ScyllaUpsertProfileReq) (*ScyllaProfile, error)
	DeleteProfile(context.Context, *ScyllaProfileReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedScyllaProfileServiceServer()
}

// UnimplementedScyllaProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScyllaProfileServiceServer struct {
}

func (UnimplementedScyllaProfileServiceServer) GetProfile(context.Context, *ScyllaProfileReq) (*ScyllaProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedScyllaProfileServiceServer) UpsertProfile(context.Context, *ScyllaUpsertProfileReq) (*ScyllaProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertProfile not implemented")
}
func (UnimplementedScyllaProfileServiceServer) DeleteProfile(context.Context, *ScyllaProfileReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedScyllaProfileServiceServer) mustEmbedUnimplementedScyllaProfileServiceServer() {}

// UnsafeScyllaProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScyllaProfileServiceServer will
// result in compilation errors.
type UnsafeScyllaProfileServiceServer interface {
	mustEmbedUnimplementedScyllaProfileServiceServer()
}

func RegisterScyllaProfileServiceServer(s grpc.ServiceRegistrar, srv ScyllaProfileServiceServer) {
	s.RegisterService(&ScyllaProfileService_ServiceDesc, srv)
}

func _ScyllaProfileService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaProfileServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.profile.v1.ScyllaProfileService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaProfileServiceServer).GetProfile(ctx, req.(*ScyllaProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScyllaProfileService_UpsertProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaUpsertProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaProfileServiceServer).UpsertProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.profile.v1.ScyllaProfileService/UpsertProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaProfileServiceServer).UpsertProfile(ctx, req.(*ScyllaUpsertProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScyllaProfileService_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaProfileServiceServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.profile.v1.ScyllaProfileService/DeleteProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaProfileServiceServer).DeleteProfile(ctx, req.(*ScyllaProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ScyllaProfileService_ServiceDesc is the grpc.ServiceDesc for ScyllaProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScyllaProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scylla.lol.profile.v1.ScyllaProfileService",
	HandlerType: (*ScyllaProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _ScyllaProfileService_GetProfile_Handler,
		},
		{
			MethodName: "UpsertProfile",
			Handler:    _ScyllaProfileService_UpsertProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _ScyllaProfileService_DeleteProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scylla/lol/profile/v1/profile.proto",
}
