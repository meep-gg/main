// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: scylla/lol/match/v1/match.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScyllaMatchServiceClient is the client API for ScyllaMatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScyllaMatchServiceClient interface {
	// Match
	CheckMatch(ctx context.Context, in *ScyllaMatchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMatch(ctx context.Context, in *ScyllaMatchReq, opts ...grpc.CallOption) (*ScyllaMatch, error)
	GetMatches(ctx context.Context, in *ScyllaGetMatchesReq, opts ...grpc.CallOption) (*ScyllaMatches, error)
	UpsertMatch(ctx context.Context, in *ScyllaUpsertMatchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMatch(ctx context.Context, in *ScyllaMatchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type scyllaMatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScyllaMatchServiceClient(cc grpc.ClientConnInterface) ScyllaMatchServiceClient {
	return &scyllaMatchServiceClient{cc}
}

func (c *scyllaMatchServiceClient) CheckMatch(ctx context.Context, in *ScyllaMatchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scylla.lol.match.v1.ScyllaMatchService/CheckMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scyllaMatchServiceClient) GetMatch(ctx context.Context, in *ScyllaMatchReq, opts ...grpc.CallOption) (*ScyllaMatch, error) {
	out := new(ScyllaMatch)
	err := c.cc.Invoke(ctx, "/scylla.lol.match.v1.ScyllaMatchService/GetMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scyllaMatchServiceClient) GetMatches(ctx context.Context, in *ScyllaGetMatchesReq, opts ...grpc.CallOption) (*ScyllaMatches, error) {
	out := new(ScyllaMatches)
	err := c.cc.Invoke(ctx, "/scylla.lol.match.v1.ScyllaMatchService/GetMatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scyllaMatchServiceClient) UpsertMatch(ctx context.Context, in *ScyllaUpsertMatchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scylla.lol.match.v1.ScyllaMatchService/UpsertMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scyllaMatchServiceClient) DeleteMatch(ctx context.Context, in *ScyllaMatchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scylla.lol.match.v1.ScyllaMatchService/DeleteMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScyllaMatchServiceServer is the server API for ScyllaMatchService service.
// All implementations must embed UnimplementedScyllaMatchServiceServer
// for forward compatibility
type ScyllaMatchServiceServer interface {
	// Match
	CheckMatch(context.Context, *ScyllaMatchReq) (*emptypb.Empty, error)
	GetMatch(context.Context, *ScyllaMatchReq) (*ScyllaMatch, error)
	GetMatches(context.Context, *ScyllaGetMatchesReq) (*ScyllaMatches, error)
	UpsertMatch(context.Context, *ScyllaUpsertMatchReq) (*emptypb.Empty, error)
	DeleteMatch(context.Context, *ScyllaMatchReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedScyllaMatchServiceServer()
}

// UnimplementedScyllaMatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScyllaMatchServiceServer struct {
}

func (UnimplementedScyllaMatchServiceServer) CheckMatch(context.Context, *ScyllaMatchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMatch not implemented")
}
func (UnimplementedScyllaMatchServiceServer) GetMatch(context.Context, *ScyllaMatchReq) (*ScyllaMatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatch not implemented")
}
func (UnimplementedScyllaMatchServiceServer) GetMatches(context.Context, *ScyllaGetMatchesReq) (*ScyllaMatches, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatches not implemented")
}
func (UnimplementedScyllaMatchServiceServer) UpsertMatch(context.Context, *ScyllaUpsertMatchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMatch not implemented")
}
func (UnimplementedScyllaMatchServiceServer) DeleteMatch(context.Context, *ScyllaMatchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMatch not implemented")
}
func (UnimplementedScyllaMatchServiceServer) mustEmbedUnimplementedScyllaMatchServiceServer() {}

// UnsafeScyllaMatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScyllaMatchServiceServer will
// result in compilation errors.
type UnsafeScyllaMatchServiceServer interface {
	mustEmbedUnimplementedScyllaMatchServiceServer()
}

func RegisterScyllaMatchServiceServer(s grpc.ServiceRegistrar, srv ScyllaMatchServiceServer) {
	s.RegisterService(&ScyllaMatchService_ServiceDesc, srv)
}

func _ScyllaMatchService_CheckMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaMatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaMatchServiceServer).CheckMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.match.v1.ScyllaMatchService/CheckMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaMatchServiceServer).CheckMatch(ctx, req.(*ScyllaMatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScyllaMatchService_GetMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaMatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaMatchServiceServer).GetMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.match.v1.ScyllaMatchService/GetMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaMatchServiceServer).GetMatch(ctx, req.(*ScyllaMatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScyllaMatchService_GetMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaGetMatchesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaMatchServiceServer).GetMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.match.v1.ScyllaMatchService/GetMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaMatchServiceServer).GetMatches(ctx, req.(*ScyllaGetMatchesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScyllaMatchService_UpsertMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaUpsertMatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaMatchServiceServer).UpsertMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.match.v1.ScyllaMatchService/UpsertMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaMatchServiceServer).UpsertMatch(ctx, req.(*ScyllaUpsertMatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScyllaMatchService_DeleteMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScyllaMatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScyllaMatchServiceServer).DeleteMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scylla.lol.match.v1.ScyllaMatchService/DeleteMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScyllaMatchServiceServer).DeleteMatch(ctx, req.(*ScyllaMatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ScyllaMatchService_ServiceDesc is the grpc.ServiceDesc for ScyllaMatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScyllaMatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scylla.lol.match.v1.ScyllaMatchService",
	HandlerType: (*ScyllaMatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckMatch",
			Handler:    _ScyllaMatchService_CheckMatch_Handler,
		},
		{
			MethodName: "GetMatch",
			Handler:    _ScyllaMatchService_GetMatch_Handler,
		},
		{
			MethodName: "GetMatches",
			Handler:    _ScyllaMatchService_GetMatches_Handler,
		},
		{
			MethodName: "UpsertMatch",
			Handler:    _ScyllaMatchService_UpsertMatch_Handler,
		},
		{
			MethodName: "DeleteMatch",
			Handler:    _ScyllaMatchService_DeleteMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scylla/lol/match/v1/match.proto",
}
