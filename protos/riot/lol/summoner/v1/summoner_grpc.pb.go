// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: riot/lol/summoner/v1/summoner.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RiotSummonerServiceClient is the client API for RiotSummonerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiotSummonerServiceClient interface {
	Account(ctx context.Context, in *RiotSummonerAccountReq, opts ...grpc.CallOption) (*RiotSummoner, error)
	Name(ctx context.Context, in *RiotSummonerNameReq, opts ...grpc.CallOption) (*RiotSummoner, error)
	Puuid(ctx context.Context, in *RiotSummonerPuuidReq, opts ...grpc.CallOption) (*RiotSummoner, error)
	Id(ctx context.Context, in *RiotSummonerIdReq, opts ...grpc.CallOption) (*RiotSummoner, error)
}

type riotSummonerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiotSummonerServiceClient(cc grpc.ClientConnInterface) RiotSummonerServiceClient {
	return &riotSummonerServiceClient{cc}
}

func (c *riotSummonerServiceClient) Account(ctx context.Context, in *RiotSummonerAccountReq, opts ...grpc.CallOption) (*RiotSummoner, error) {
	out := new(RiotSummoner)
	err := c.cc.Invoke(ctx, "/riot.lol.summoner.v1.RiotSummonerService/Account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotSummonerServiceClient) Name(ctx context.Context, in *RiotSummonerNameReq, opts ...grpc.CallOption) (*RiotSummoner, error) {
	out := new(RiotSummoner)
	err := c.cc.Invoke(ctx, "/riot.lol.summoner.v1.RiotSummonerService/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotSummonerServiceClient) Puuid(ctx context.Context, in *RiotSummonerPuuidReq, opts ...grpc.CallOption) (*RiotSummoner, error) {
	out := new(RiotSummoner)
	err := c.cc.Invoke(ctx, "/riot.lol.summoner.v1.RiotSummonerService/Puuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotSummonerServiceClient) Id(ctx context.Context, in *RiotSummonerIdReq, opts ...grpc.CallOption) (*RiotSummoner, error) {
	out := new(RiotSummoner)
	err := c.cc.Invoke(ctx, "/riot.lol.summoner.v1.RiotSummonerService/Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiotSummonerServiceServer is the server API for RiotSummonerService service.
// All implementations must embed UnimplementedRiotSummonerServiceServer
// for forward compatibility
type RiotSummonerServiceServer interface {
	Account(context.Context, *RiotSummonerAccountReq) (*RiotSummoner, error)
	Name(context.Context, *RiotSummonerNameReq) (*RiotSummoner, error)
	Puuid(context.Context, *RiotSummonerPuuidReq) (*RiotSummoner, error)
	Id(context.Context, *RiotSummonerIdReq) (*RiotSummoner, error)
	mustEmbedUnimplementedRiotSummonerServiceServer()
}

// UnimplementedRiotSummonerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRiotSummonerServiceServer struct {
}

func (UnimplementedRiotSummonerServiceServer) Account(context.Context, *RiotSummonerAccountReq) (*RiotSummoner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (UnimplementedRiotSummonerServiceServer) Name(context.Context, *RiotSummonerNameReq) (*RiotSummoner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedRiotSummonerServiceServer) Puuid(context.Context, *RiotSummonerPuuidReq) (*RiotSummoner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Puuid not implemented")
}
func (UnimplementedRiotSummonerServiceServer) Id(context.Context, *RiotSummonerIdReq) (*RiotSummoner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Id not implemented")
}
func (UnimplementedRiotSummonerServiceServer) mustEmbedUnimplementedRiotSummonerServiceServer() {}

// UnsafeRiotSummonerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiotSummonerServiceServer will
// result in compilation errors.
type UnsafeRiotSummonerServiceServer interface {
	mustEmbedUnimplementedRiotSummonerServiceServer()
}

func RegisterRiotSummonerServiceServer(s grpc.ServiceRegistrar, srv RiotSummonerServiceServer) {
	s.RegisterService(&RiotSummonerService_ServiceDesc, srv)
}

func _RiotSummonerService_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiotSummonerAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotSummonerServiceServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/riot.lol.summoner.v1.RiotSummonerService/Account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotSummonerServiceServer).Account(ctx, req.(*RiotSummonerAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotSummonerService_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiotSummonerNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotSummonerServiceServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/riot.lol.summoner.v1.RiotSummonerService/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotSummonerServiceServer).Name(ctx, req.(*RiotSummonerNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotSummonerService_Puuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiotSummonerPuuidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotSummonerServiceServer).Puuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/riot.lol.summoner.v1.RiotSummonerService/Puuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotSummonerServiceServer).Puuid(ctx, req.(*RiotSummonerPuuidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotSummonerService_Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiotSummonerIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotSummonerServiceServer).Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/riot.lol.summoner.v1.RiotSummonerService/Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotSummonerServiceServer).Id(ctx, req.(*RiotSummonerIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RiotSummonerService_ServiceDesc is the grpc.ServiceDesc for RiotSummonerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiotSummonerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "riot.lol.summoner.v1.RiotSummonerService",
	HandlerType: (*RiotSummonerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Account",
			Handler:    _RiotSummonerService_Account_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _RiotSummonerService_Name_Handler,
		},
		{
			MethodName: "Puuid",
			Handler:    _RiotSummonerService_Puuid_Handler,
		},
		{
			MethodName: "Id",
			Handler:    _RiotSummonerService_Id_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "riot/lol/summoner/v1/summoner.proto",
}
