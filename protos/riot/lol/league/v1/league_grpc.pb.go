// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: riot/lol/league/v1/league.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RiotLeagueServiceClient is the client API for RiotLeagueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiotLeagueServiceClient interface {
	Challenger(ctx context.Context, in *RiotLeagueApexReq, opts ...grpc.CallOption) (*RiotLeagueList, error)
	Grandmaster(ctx context.Context, in *RiotLeagueApexReq, opts ...grpc.CallOption) (*RiotLeagueList, error)
	Master(ctx context.Context, in *RiotLeagueApexReq, opts ...grpc.CallOption) (*RiotLeagueList, error)
	SummonerId(ctx context.Context, in *RiotLeagueSummonerIdReq, opts ...grpc.CallOption) (*RiotLeagueEntries, error)
	LeagueId(ctx context.Context, in *RiotLeagueIdReq, opts ...grpc.CallOption) (*RiotLeagueList, error)
	Entry(ctx context.Context, in *RiotLeagueEntryReq, opts ...grpc.CallOption) (*RiotLeagueEntries, error)
}

type riotLeagueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiotLeagueServiceClient(cc grpc.ClientConnInterface) RiotLeagueServiceClient {
	return &riotLeagueServiceClient{cc}
}

func (c *riotLeagueServiceClient) Challenger(ctx context.Context, in *RiotLeagueApexReq, opts ...grpc.CallOption) (*RiotLeagueList, error) {
	out := new(RiotLeagueList)
	err := c.cc.Invoke(ctx, "/riot.lol.league.v1.RiotLeagueService/Challenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotLeagueServiceClient) Grandmaster(ctx context.Context, in *RiotLeagueApexReq, opts ...grpc.CallOption) (*RiotLeagueList, error) {
	out := new(RiotLeagueList)
	err := c.cc.Invoke(ctx, "/riot.lol.league.v1.RiotLeagueService/Grandmaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotLeagueServiceClient) Master(ctx context.Context, in *RiotLeagueApexReq, opts ...grpc.CallOption) (*RiotLeagueList, error) {
	out := new(RiotLeagueList)
	err := c.cc.Invoke(ctx, "/riot.lol.league.v1.RiotLeagueService/Master", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotLeagueServiceClient) SummonerId(ctx context.Context, in *RiotLeagueSummonerIdReq, opts ...grpc.CallOption) (*RiotLeagueEntries, error) {
	out := new(RiotLeagueEntries)
	err := c.cc.Invoke(ctx, "/riot.lol.league.v1.RiotLeagueService/SummonerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotLeagueServiceClient) LeagueId(ctx context.Context, in *RiotLeagueIdReq, opts ...grpc.CallOption) (*RiotLeagueList, error) {
	out := new(RiotLeagueList)
	err := c.cc.Invoke(ctx, "/riot.lol.league.v1.RiotLeagueService/LeagueId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotLeagueServiceClient) Entry(ctx context.Context, in *RiotLeagueEntryReq, opts ...grpc.CallOption) (*RiotLeagueEntries, error) {
	out := new(RiotLeagueEntries)
	err := c.cc.Invoke(ctx, "/riot.lol.league.v1.RiotLeagueService/Entry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiotLeagueServiceServer is the server API for RiotLeagueService service.
// All implementations must embed UnimplementedRiotLeagueServiceServer
// for forward compatibility
type RiotLeagueServiceServer interface {
	Challenger(context.Context, *RiotLeagueApexReq) (*RiotLeagueList, error)
	Grandmaster(context.Context, *RiotLeagueApexReq) (*RiotLeagueList, error)
	Master(context.Context, *RiotLeagueApexReq) (*RiotLeagueList, error)
	SummonerId(context.Context, *RiotLeagueSummonerIdReq) (*RiotLeagueEntries, error)
	LeagueId(context.Context, *RiotLeagueIdReq) (*RiotLeagueList, error)
	Entry(context.Context, *RiotLeagueEntryReq) (*RiotLeagueEntries, error)
	mustEmbedUnimplementedRiotLeagueServiceServer()
}

// UnimplementedRiotLeagueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRiotLeagueServiceServer struct {
}

func (UnimplementedRiotLeagueServiceServer) Challenger(context.Context, *RiotLeagueApexReq) (*RiotLeagueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Challenger not implemented")
}
func (UnimplementedRiotLeagueServiceServer) Grandmaster(context.Context, *RiotLeagueApexReq) (*RiotLeagueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grandmaster not implemented")
}
func (UnimplementedRiotLeagueServiceServer) Master(context.Context, *RiotLeagueApexReq) (*RiotLeagueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Master not implemented")
}
func (UnimplementedRiotLeagueServiceServer) SummonerId(context.Context, *RiotLeagueSummonerIdReq) (*RiotLeagueEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SummonerId not implemented")
}
func (UnimplementedRiotLeagueServiceServer) LeagueId(context.Context, *RiotLeagueIdReq) (*RiotLeagueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeagueId not implemented")
}
func (UnimplementedRiotLeagueServiceServer) Entry(context.Context, *RiotLeagueEntryReq) (*RiotLeagueEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Entry not implemented")
}
func (UnimplementedRiotLeagueServiceServer) mustEmbedUnimplementedRiotLeagueServiceServer() {}

// UnsafeRiotLeagueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiotLeagueServiceServer will
// result in compilation errors.
type UnsafeRiotLeagueServiceServer interface {
	mustEmbedUnimplementedRiotLeagueServiceServer()
}

func RegisterRiotLeagueServiceServer(s grpc.ServiceRegistrar, srv RiotLeagueServiceServer) {
	s.RegisterService(&RiotLeagueService_ServiceDesc, srv)
}

func _RiotLeagueService_Challenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiotLeagueApexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotLeagueServiceServer).Challenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/riot.lol.league.v1.RiotLeagueService/Challenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotLeagueServiceServer).Challenger(ctx, req.(*RiotLeagueApexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotLeagueService_Grandmaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiotLeagueApexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotLeagueServiceServer).Grandmaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/riot.lol.league.v1.RiotLeagueService/Grandmaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotLeagueServiceServer).Grandmaster(ctx, req.(*RiotLeagueApexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotLeagueService_Master_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiotLeagueApexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotLeagueServiceServer).Master(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/riot.lol.league.v1.RiotLeagueService/Master",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotLeagueServiceServer).Master(ctx, req.(*RiotLeagueApexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotLeagueService_SummonerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiotLeagueSummonerIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotLeagueServiceServer).SummonerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/riot.lol.league.v1.RiotLeagueService/SummonerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotLeagueServiceServer).SummonerId(ctx, req.(*RiotLeagueSummonerIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotLeagueService_LeagueId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiotLeagueIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotLeagueServiceServer).LeagueId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/riot.lol.league.v1.RiotLeagueService/LeagueId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotLeagueServiceServer).LeagueId(ctx, req.(*RiotLeagueIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotLeagueService_Entry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiotLeagueEntryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotLeagueServiceServer).Entry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/riot.lol.league.v1.RiotLeagueService/Entry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotLeagueServiceServer).Entry(ctx, req.(*RiotLeagueEntryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RiotLeagueService_ServiceDesc is the grpc.ServiceDesc for RiotLeagueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiotLeagueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "riot.lol.league.v1.RiotLeagueService",
	HandlerType: (*RiotLeagueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Challenger",
			Handler:    _RiotLeagueService_Challenger_Handler,
		},
		{
			MethodName: "Grandmaster",
			Handler:    _RiotLeagueService_Grandmaster_Handler,
		},
		{
			MethodName: "Master",
			Handler:    _RiotLeagueService_Master_Handler,
		},
		{
			MethodName: "SummonerId",
			Handler:    _RiotLeagueService_SummonerId_Handler,
		},
		{
			MethodName: "LeagueId",
			Handler:    _RiotLeagueService_LeagueId_Handler,
		},
		{
			MethodName: "Entry",
			Handler:    _RiotLeagueService_Entry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "riot/lol/league/v1/league.proto",
}
