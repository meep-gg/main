// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: riot/lol/match/v1/match.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RiotMatchPuuidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region    string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Puuid     string `protobuf:"bytes,2,opt,name=puuid,proto3" json:"puuid,omitempty"`
	StartTime int64  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   int64  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Queue     int32  `protobuf:"varint,5,opt,name=queue,proto3" json:"queue,omitempty"`
	Type      string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Start     int32  `protobuf:"varint,7,opt,name=start,proto3" json:"start,omitempty"`
	Count     int32  `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RiotMatchPuuidReq) Reset() {
	*x = RiotMatchPuuidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiotMatchPuuidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiotMatchPuuidReq) ProtoMessage() {}

func (x *RiotMatchPuuidReq) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiotMatchPuuidReq.ProtoReflect.Descriptor instead.
func (*RiotMatchPuuidReq) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{0}
}

func (x *RiotMatchPuuidReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RiotMatchPuuidReq) GetPuuid() string {
	if x != nil {
		return x.Puuid
	}
	return ""
}

func (x *RiotMatchPuuidReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RiotMatchPuuidReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RiotMatchPuuidReq) GetQueue() int32 {
	if x != nil {
		return x.Queue
	}
	return 0
}

func (x *RiotMatchPuuidReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RiotMatchPuuidReq) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *RiotMatchPuuidReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RiotMatchIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region  string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	MatchId string `protobuf:"bytes,2,opt,name=matchId,proto3" json:"matchId,omitempty"`
}

func (x *RiotMatchIdReq) Reset() {
	*x = RiotMatchIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiotMatchIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiotMatchIdReq) ProtoMessage() {}

func (x *RiotMatchIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiotMatchIdReq.ProtoReflect.Descriptor instead.
func (*RiotMatchIdReq) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{1}
}

func (x *RiotMatchIdReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RiotMatchIdReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type RiotMatchIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []string `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *RiotMatchIds) Reset() {
	*x = RiotMatchIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiotMatchIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiotMatchIds) ProtoMessage() {}

func (x *RiotMatchIds) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiotMatchIds.ProtoReflect.Descriptor instead.
func (*RiotMatchIds) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{2}
}

func (x *RiotMatchIds) GetMatches() []string {
	if x != nil {
		return x.Matches
	}
	return nil
}

type RiotMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Info     *MatchInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RiotMatch) Reset() {
	*x = RiotMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiotMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiotMatch) ProtoMessage() {}

func (x *RiotMatch) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiotMatch.ProtoReflect.Descriptor instead.
func (*RiotMatch) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{3}
}

func (x *RiotMatch) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RiotMatch) GetInfo() *MatchInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataVersion  string   `protobuf:"bytes,1,opt,name=dataVersion,proto3" json:"dataVersion,omitempty"`
	MatchId      string   `protobuf:"bytes,2,opt,name=matchId,proto3" json:"matchId,omitempty"`
	Participants []string `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{4}
}

func (x *Metadata) GetDataVersion() string {
	if x != nil {
		return x.DataVersion
	}
	return ""
}

func (x *Metadata) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *Metadata) GetParticipants() []string {
	if x != nil {
		return x.Participants
	}
	return nil
}

type MatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCreation       int64          `protobuf:"varint,1,opt,name=gameCreation,proto3" json:"gameCreation,omitempty"`
	GameDuration       int32          `protobuf:"varint,2,opt,name=gameDuration,proto3" json:"gameDuration,omitempty"`
	GameEndTimestamp   int64          `protobuf:"varint,3,opt,name=gameEndTimestamp,proto3" json:"gameEndTimestamp,omitempty"`
	GameId             int64          `protobuf:"varint,4,opt,name=gameId,proto3" json:"gameId,omitempty"`
	GameMode           string         `protobuf:"bytes,5,opt,name=gameMode,proto3" json:"gameMode,omitempty"`
	GameName           string         `protobuf:"bytes,6,opt,name=gameName,proto3" json:"gameName,omitempty"`
	GameStartTimestamp int64          `protobuf:"varint,7,opt,name=gameStartTimestamp,proto3" json:"gameStartTimestamp,omitempty"`
	GameType           string         `protobuf:"bytes,8,opt,name=gameType,proto3" json:"gameType,omitempty"`
	GameVersion        string         `protobuf:"bytes,9,opt,name=gameVersion,proto3" json:"gameVersion,omitempty"`
	MapId              int32          `protobuf:"varint,10,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Participants       []*Participant `protobuf:"bytes,11,rep,name=participants,proto3" json:"participants,omitempty"`
	PlatformId         string         `protobuf:"bytes,12,opt,name=platformId,proto3" json:"platformId,omitempty"`
	QueueId            int32          `protobuf:"varint,13,opt,name=queueId,proto3" json:"queueId,omitempty"`
	Teams              []*Team        `protobuf:"bytes,14,rep,name=teams,proto3" json:"teams,omitempty"`
	TournamentCode     string         `protobuf:"bytes,15,opt,name=tournamentCode,proto3" json:"tournamentCode,omitempty"`
}

func (x *MatchInfo) Reset() {
	*x = MatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfo) ProtoMessage() {}

func (x *MatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfo.ProtoReflect.Descriptor instead.
func (*MatchInfo) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{5}
}

func (x *MatchInfo) GetGameCreation() int64 {
	if x != nil {
		return x.GameCreation
	}
	return 0
}

func (x *MatchInfo) GetGameDuration() int32 {
	if x != nil {
		return x.GameDuration
	}
	return 0
}

func (x *MatchInfo) GetGameEndTimestamp() int64 {
	if x != nil {
		return x.GameEndTimestamp
	}
	return 0
}

func (x *MatchInfo) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *MatchInfo) GetGameMode() string {
	if x != nil {
		return x.GameMode
	}
	return ""
}

func (x *MatchInfo) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *MatchInfo) GetGameStartTimestamp() int64 {
	if x != nil {
		return x.GameStartTimestamp
	}
	return 0
}

func (x *MatchInfo) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *MatchInfo) GetGameVersion() string {
	if x != nil {
		return x.GameVersion
	}
	return ""
}

func (x *MatchInfo) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *MatchInfo) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *MatchInfo) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *MatchInfo) GetQueueId() int32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *MatchInfo) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *MatchInfo) GetTournamentCode() string {
	if x != nil {
		return x.TournamentCode
	}
	return ""
}

type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllInPings                     int32       `protobuf:"varint,1,opt,name=allInPings,proto3" json:"allInPings,omitempty"`
	AssistMePings                  int32       `protobuf:"varint,2,opt,name=assistMePings,proto3" json:"assistMePings,omitempty"`
	Assists                        int32       `protobuf:"varint,3,opt,name=assists,proto3" json:"assists,omitempty"`
	BaitPings                      int32       `protobuf:"varint,4,opt,name=baitPings,proto3" json:"baitPings,omitempty"`
	BaronKills                     int32       `protobuf:"varint,5,opt,name=baronKills,proto3" json:"baronKills,omitempty"`
	BasicPings                     int32       `protobuf:"varint,6,opt,name=basicPings,proto3" json:"basicPings,omitempty"`
	BountyLevel                    int32       `protobuf:"varint,7,opt,name=bountyLevel,proto3" json:"bountyLevel,omitempty"`
	Challenges                     *Challenges `protobuf:"bytes,8,opt,name=challenges,proto3" json:"challenges,omitempty"`
	ChampExperience                int32       `protobuf:"varint,9,opt,name=champExperience,proto3" json:"champExperience,omitempty"`
	ChampLevel                     int32       `protobuf:"varint,10,opt,name=champLevel,proto3" json:"champLevel,omitempty"`
	ChampionId                     int32       `protobuf:"varint,11,opt,name=championId,proto3" json:"championId,omitempty"`
	ChampionName                   string      `protobuf:"bytes,12,opt,name=championName,proto3" json:"championName,omitempty"`
	ChampionTransform              int32       `protobuf:"varint,13,opt,name=championTransform,proto3" json:"championTransform,omitempty"`
	CommandPings                   int32       `protobuf:"varint,14,opt,name=commandPings,proto3" json:"commandPings,omitempty"`
	ConsumablesPurchased           int32       `protobuf:"varint,15,opt,name=consumablesPurchased,proto3" json:"consumablesPurchased,omitempty"`
	DamageDealtToBuildings         int32       `protobuf:"varint,16,opt,name=damageDealtToBuildings,proto3" json:"damageDealtToBuildings,omitempty"`
	DamageDealtToObjectives        int32       `protobuf:"varint,17,opt,name=damageDealtToObjectives,proto3" json:"damageDealtToObjectives,omitempty"`
	DamageDealtToTurrets           int32       `protobuf:"varint,18,opt,name=damageDealtToTurrets,proto3" json:"damageDealtToTurrets,omitempty"`
	DamageSelfMitigated            int32       `protobuf:"varint,19,opt,name=damageSelfMitigated,proto3" json:"damageSelfMitigated,omitempty"`
	DangerPings                    int32       `protobuf:"varint,20,opt,name=dangerPings,proto3" json:"dangerPings,omitempty"`
	Deaths                         int32       `protobuf:"varint,21,opt,name=deaths,proto3" json:"deaths,omitempty"`
	DetectorWardsPlaced            int32       `protobuf:"varint,22,opt,name=detectorWardsPlaced,proto3" json:"detectorWardsPlaced,omitempty"`
	DoubleKills                    int32       `protobuf:"varint,23,opt,name=doubleKills,proto3" json:"doubleKills,omitempty"`
	DragonKills                    int32       `protobuf:"varint,24,opt,name=dragonKills,proto3" json:"dragonKills,omitempty"`
	EligibleForProgression         bool        `protobuf:"varint,25,opt,name=eligibleForProgression,proto3" json:"eligibleForProgression,omitempty"`
	EnemyMissingPings              int32       `protobuf:"varint,26,opt,name=enemyMissingPings,proto3" json:"enemyMissingPings,omitempty"`
	EnemyVisionPings               int32       `protobuf:"varint,27,opt,name=enemyVisionPings,proto3" json:"enemyVisionPings,omitempty"`
	FirstBloodAssist               bool        `protobuf:"varint,28,opt,name=firstBloodAssist,proto3" json:"firstBloodAssist,omitempty"`
	FirstBloodKill                 bool        `protobuf:"varint,29,opt,name=firstBloodKill,proto3" json:"firstBloodKill,omitempty"`
	FirstTowerAssist               bool        `protobuf:"varint,30,opt,name=firstTowerAssist,proto3" json:"firstTowerAssist,omitempty"`
	FirstTowerKill                 bool        `protobuf:"varint,31,opt,name=firstTowerKill,proto3" json:"firstTowerKill,omitempty"`
	GameEndedInEarlySurrender      bool        `protobuf:"varint,32,opt,name=gameEndedInEarlySurrender,proto3" json:"gameEndedInEarlySurrender,omitempty"`
	GameEndedInSurrender           bool        `protobuf:"varint,33,opt,name=gameEndedInSurrender,proto3" json:"gameEndedInSurrender,omitempty"`
	GetBackPings                   int32       `protobuf:"varint,34,opt,name=getBackPings,proto3" json:"getBackPings,omitempty"`
	GoldEarned                     int32       `protobuf:"varint,35,opt,name=goldEarned,proto3" json:"goldEarned,omitempty"`
	GoldSpent                      int32       `protobuf:"varint,36,opt,name=goldSpent,proto3" json:"goldSpent,omitempty"`
	HoldPings                      int32       `protobuf:"varint,37,opt,name=holdPings,proto3" json:"holdPings,omitempty"`
	IndividualPosition             string      `protobuf:"bytes,38,opt,name=individualPosition,proto3" json:"individualPosition,omitempty"`
	InhibitorKills                 int32       `protobuf:"varint,39,opt,name=inhibitorKills,proto3" json:"inhibitorKills,omitempty"`
	InhibitorTakedowns             int32       `protobuf:"varint,40,opt,name=inhibitorTakedowns,proto3" json:"inhibitorTakedowns,omitempty"`
	InhibitorsLost                 int32       `protobuf:"varint,41,opt,name=inhibitorsLost,proto3" json:"inhibitorsLost,omitempty"`
	Item0                          int32       `protobuf:"varint,42,opt,name=item0,proto3" json:"item0,omitempty"`
	Item1                          int32       `protobuf:"varint,43,opt,name=item1,proto3" json:"item1,omitempty"`
	Item2                          int32       `protobuf:"varint,44,opt,name=item2,proto3" json:"item2,omitempty"`
	Item3                          int32       `protobuf:"varint,45,opt,name=item3,proto3" json:"item3,omitempty"`
	Item4                          int32       `protobuf:"varint,46,opt,name=item4,proto3" json:"item4,omitempty"`
	Item5                          int32       `protobuf:"varint,47,opt,name=item5,proto3" json:"item5,omitempty"`
	Item6                          int32       `protobuf:"varint,48,opt,name=item6,proto3" json:"item6,omitempty"`
	ItemsPurchased                 int32       `protobuf:"varint,49,opt,name=itemsPurchased,proto3" json:"itemsPurchased,omitempty"`
	KillingSprees                  int32       `protobuf:"varint,50,opt,name=killingSprees,proto3" json:"killingSprees,omitempty"`
	Kills                          int32       `protobuf:"varint,51,opt,name=kills,proto3" json:"kills,omitempty"`
	Lane                           string      `protobuf:"bytes,52,opt,name=lane,proto3" json:"lane,omitempty"`
	LargestCriticalStrike          int32       `protobuf:"varint,53,opt,name=largestCriticalStrike,proto3" json:"largestCriticalStrike,omitempty"`
	LargestKillingSpree            int32       `protobuf:"varint,54,opt,name=largestKillingSpree,proto3" json:"largestKillingSpree,omitempty"`
	LargestMultiKill               int32       `protobuf:"varint,55,opt,name=largestMultiKill,proto3" json:"largestMultiKill,omitempty"`
	LongestTimeSpentLiving         int32       `protobuf:"varint,56,opt,name=longestTimeSpentLiving,proto3" json:"longestTimeSpentLiving,omitempty"`
	MagicDamageDealt               int32       `protobuf:"varint,57,opt,name=magicDamageDealt,proto3" json:"magicDamageDealt,omitempty"`
	MagicDamageDealtToChampions    int32       `protobuf:"varint,58,opt,name=magicDamageDealtToChampions,proto3" json:"magicDamageDealtToChampions,omitempty"`
	MagicDamageTaken               int32       `protobuf:"varint,59,opt,name=magicDamageTaken,proto3" json:"magicDamageTaken,omitempty"`
	NeutralMinionsKilled           int32       `protobuf:"varint,60,opt,name=neutralMinionsKilled,proto3" json:"neutralMinionsKilled,omitempty"`
	NeedVisionPings                int32       `protobuf:"varint,61,opt,name=needVisionPings,proto3" json:"needVisionPings,omitempty"`
	NexusKills                     int32       `protobuf:"varint,62,opt,name=nexusKills,proto3" json:"nexusKills,omitempty"`
	NexusLost                      int32       `protobuf:"varint,63,opt,name=nexusLost,proto3" json:"nexusLost,omitempty"`
	NexusTakedowns                 int32       `protobuf:"varint,64,opt,name=nexusTakedowns,proto3" json:"nexusTakedowns,omitempty"`
	ObjectivesStolen               int32       `protobuf:"varint,65,opt,name=objectivesStolen,proto3" json:"objectivesStolen,omitempty"`
	ObjectivesStolenAssists        int32       `protobuf:"varint,66,opt,name=objectivesStolenAssists,proto3" json:"objectivesStolenAssists,omitempty"`
	OnMyWayPings                   int32       `protobuf:"varint,67,opt,name=onMyWayPings,proto3" json:"onMyWayPings,omitempty"`
	ParticipantId                  int32       `protobuf:"varint,68,opt,name=participantId,proto3" json:"participantId,omitempty"`
	PentaKills                     int32       `protobuf:"varint,69,opt,name=pentaKills,proto3" json:"pentaKills,omitempty"`
	PlayerScore11                  int32       `protobuf:"varint,70,opt,name=playerScore11,proto3" json:"playerScore11,omitempty"`
	Perks                          *Perks      `protobuf:"bytes,71,opt,name=perks,proto3" json:"perks,omitempty"`
	PhysicalDamageDealt            int32       `protobuf:"varint,72,opt,name=physicalDamageDealt,proto3" json:"physicalDamageDealt,omitempty"`
	PhysicalDamageDealtToChampions int32       `protobuf:"varint,73,opt,name=physicalDamageDealtToChampions,proto3" json:"physicalDamageDealtToChampions,omitempty"`
	PhysicalDamageTaken            int32       `protobuf:"varint,74,opt,name=physicalDamageTaken,proto3" json:"physicalDamageTaken,omitempty"`
	Placement                      int32       `protobuf:"varint,75,opt,name=placement,proto3" json:"placement,omitempty"`
	PlayerAugment1                 int32       `protobuf:"varint,76,opt,name=playerAugment1,proto3" json:"playerAugment1,omitempty"`
	PlayerAugment2                 int32       `protobuf:"varint,77,opt,name=playerAugment2,proto3" json:"playerAugment2,omitempty"`
	PlayerAugment3                 int32       `protobuf:"varint,78,opt,name=playerAugment3,proto3" json:"playerAugment3,omitempty"`
	PlayerAugment4                 int32       `protobuf:"varint,79,opt,name=playerAugment4,proto3" json:"playerAugment4,omitempty"`
	PlayerSubteamId                int32       `protobuf:"varint,80,opt,name=playerSubteamId,proto3" json:"playerSubteamId,omitempty"`
	ProfileIcon                    int32       `protobuf:"varint,81,opt,name=profileIcon,proto3" json:"profileIcon,omitempty"`
	PushPings                      int32       `protobuf:"varint,82,opt,name=pushPings,proto3" json:"pushPings,omitempty"`
	Puuid                          string      `protobuf:"bytes,83,opt,name=puuid,proto3" json:"puuid,omitempty"`
	QuadraKills                    int32       `protobuf:"varint,84,opt,name=quadraKills,proto3" json:"quadraKills,omitempty"`
	RiotIdGameName                 string      `protobuf:"bytes,85,opt,name=riotIdGameName,proto3" json:"riotIdGameName,omitempty"`
	RiotIdTagline                  string      `protobuf:"bytes,86,opt,name=riotIdTagline,proto3" json:"riotIdTagline,omitempty"`
	Role                           string      `protobuf:"bytes,87,opt,name=role,proto3" json:"role,omitempty"`
	SightWardsBoughtInGame         int32       `protobuf:"varint,88,opt,name=sightWardsBoughtInGame,proto3" json:"sightWardsBoughtInGame,omitempty"`
	Spell1Casts                    int32       `protobuf:"varint,89,opt,name=spell1Casts,proto3" json:"spell1Casts,omitempty"`
	Spell2Casts                    int32       `protobuf:"varint,90,opt,name=spell2Casts,proto3" json:"spell2Casts,omitempty"`
	Spell3Casts                    int32       `protobuf:"varint,91,opt,name=spell3Casts,proto3" json:"spell3Casts,omitempty"`
	Spell4Casts                    int32       `protobuf:"varint,92,opt,name=spell4Casts,proto3" json:"spell4Casts,omitempty"`
	SubteamPlacement               int32       `protobuf:"varint,93,opt,name=subteamPlacement,proto3" json:"subteamPlacement,omitempty"`
	Summoner1Casts                 int32       `protobuf:"varint,94,opt,name=summoner1Casts,proto3" json:"summoner1Casts,omitempty"`
	Summoner1Id                    int32       `protobuf:"varint,95,opt,name=summoner1Id,proto3" json:"summoner1Id,omitempty"`
	Summoner2Casts                 int32       `protobuf:"varint,96,opt,name=summoner2Casts,proto3" json:"summoner2Casts,omitempty"`
	Summoner2Id                    int32       `protobuf:"varint,97,opt,name=summoner2Id,proto3" json:"summoner2Id,omitempty"`
	SummonerId                     string      `protobuf:"bytes,98,opt,name=summonerId,proto3" json:"summonerId,omitempty"`
	SummonerLevel                  int32       `protobuf:"varint,99,opt,name=summonerLevel,proto3" json:"summonerLevel,omitempty"`
	SummonerName                   string      `protobuf:"bytes,100,opt,name=summonerName,proto3" json:"summonerName,omitempty"`
	TeamEarlySurrendered           bool        `protobuf:"varint,101,opt,name=teamEarlySurrendered,proto3" json:"teamEarlySurrendered,omitempty"`
	TeamId                         int32       `protobuf:"varint,102,opt,name=teamId,proto3" json:"teamId,omitempty"`
	TeamPosition                   string      `protobuf:"bytes,103,opt,name=teamPosition,proto3" json:"teamPosition,omitempty"`
	TimeCCingOthers                int32       `protobuf:"varint,104,opt,name=timeCCingOthers,proto3" json:"timeCCingOthers,omitempty"`
	TimePlayed                     int32       `protobuf:"varint,105,opt,name=timePlayed,proto3" json:"timePlayed,omitempty"`
	TotalAllyJungleMinionsKilled   int32       `protobuf:"varint,106,opt,name=totalAllyJungleMinionsKilled,proto3" json:"totalAllyJungleMinionsKilled,omitempty"`
	TotalDamageDealt               int32       `protobuf:"varint,107,opt,name=totalDamageDealt,proto3" json:"totalDamageDealt,omitempty"`
	TotalDamageDealtToChampions    int32       `protobuf:"varint,108,opt,name=totalDamageDealtToChampions,proto3" json:"totalDamageDealtToChampions,omitempty"`
	TotalDamageShieldedOnTeammates int32       `protobuf:"varint,109,opt,name=totalDamageShieldedOnTeammates,proto3" json:"totalDamageShieldedOnTeammates,omitempty"`
	TotalDamageTaken               int32       `protobuf:"varint,110,opt,name=totalDamageTaken,proto3" json:"totalDamageTaken,omitempty"`
	TotalEnemyJungleMinionsKilled  int32       `protobuf:"varint,111,opt,name=totalEnemyJungleMinionsKilled,proto3" json:"totalEnemyJungleMinionsKilled,omitempty"`
	TotalHeal                      int32       `protobuf:"varint,112,opt,name=totalHeal,proto3" json:"totalHeal,omitempty"`
	TotalHealsOnTeammates          int32       `protobuf:"varint,114,opt,name=totalHealsOnTeammates,proto3" json:"totalHealsOnTeammates,omitempty"`
	TotalMinionsKilled             int32       `protobuf:"varint,115,opt,name=totalMinionsKilled,proto3" json:"totalMinionsKilled,omitempty"`
	TotalTimeCCDealt               int32       `protobuf:"varint,116,opt,name=totalTimeCCDealt,proto3" json:"totalTimeCCDealt,omitempty"`
	TotalTimeSpentDead             int32       `protobuf:"varint,117,opt,name=totalTimeSpentDead,proto3" json:"totalTimeSpentDead,omitempty"`
	TotalUnitsHealed               int32       `protobuf:"varint,118,opt,name=totalUnitsHealed,proto3" json:"totalUnitsHealed,omitempty"`
	TripleKills                    int32       `protobuf:"varint,119,opt,name=tripleKills,proto3" json:"tripleKills,omitempty"`
	TrueDamageDealt                int32       `protobuf:"varint,120,opt,name=trueDamageDealt,proto3" json:"trueDamageDealt,omitempty"`
	TrueDamageDealtToChampions     int32       `protobuf:"varint,121,opt,name=trueDamageDealtToChampions,proto3" json:"trueDamageDealtToChampions,omitempty"`
	TrueDamageTaken                int32       `protobuf:"varint,122,opt,name=trueDamageTaken,proto3" json:"trueDamageTaken,omitempty"`
	TurretKills                    int32       `protobuf:"varint,123,opt,name=turretKills,proto3" json:"turretKills,omitempty"`
	TurretTakedowns                int32       `protobuf:"varint,124,opt,name=turretTakedowns,proto3" json:"turretTakedowns,omitempty"`
	TurretsLost                    int32       `protobuf:"varint,125,opt,name=turretsLost,proto3" json:"turretsLost,omitempty"`
	UnrealKills                    int32       `protobuf:"varint,126,opt,name=unrealKills,proto3" json:"unrealKills,omitempty"`
	VisionClearedPings             int32       `protobuf:"varint,127,opt,name=visionClearedPings,proto3" json:"visionClearedPings,omitempty"`
	VisionScore                    int32       `protobuf:"varint,128,opt,name=visionScore,proto3" json:"visionScore,omitempty"`
	VisionWardsBoughtInGame        int32       `protobuf:"varint,129,opt,name=visionWardsBoughtInGame,proto3" json:"visionWardsBoughtInGame,omitempty"`
	WardsKilled                    int32       `protobuf:"varint,130,opt,name=wardsKilled,proto3" json:"wardsKilled,omitempty"`
	WardsPlaced                    int32       `protobuf:"varint,131,opt,name=wardsPlaced,proto3" json:"wardsPlaced,omitempty"`
	Win                            bool        `protobuf:"varint,132,opt,name=win,proto3" json:"win,omitempty"`
	// arena stats
	Missions      map[string]int32 `protobuf:"bytes,133,rep,name=missions,proto3" json:"missions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PlayerScore0  int32            `protobuf:"varint,134,opt,name=playerScore0,proto3" json:"playerScore0,omitempty"`
	PlayerScore1  int32            `protobuf:"varint,135,opt,name=playerScore1,proto3" json:"playerScore1,omitempty"`
	PlayerScore2  int32            `protobuf:"varint,136,opt,name=playerScore2,proto3" json:"playerScore2,omitempty"`
	PlayerScore3  int32            `protobuf:"varint,137,opt,name=playerScore3,proto3" json:"playerScore3,omitempty"`
	PlayerScore4  int32            `protobuf:"varint,138,opt,name=playerScore4,proto3" json:"playerScore4,omitempty"`
	PlayerScore5  int32            `protobuf:"varint,139,opt,name=playerScore5,proto3" json:"playerScore5,omitempty"`
	PlayerScore6  int32            `protobuf:"varint,140,opt,name=playerScore6,proto3" json:"playerScore6,omitempty"`
	PlayerScore7  int32            `protobuf:"varint,141,opt,name=playerScore7,proto3" json:"playerScore7,omitempty"`
	PlayerScore8  int32            `protobuf:"varint,142,opt,name=playerScore8,proto3" json:"playerScore8,omitempty"`
	PlayerScore9  int32            `protobuf:"varint,143,opt,name=playerScore9,proto3" json:"playerScore9,omitempty"`
	PlayerScore10 int32            `protobuf:"varint,144,opt,name=playerScore10,proto3" json:"playerScore10,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{6}
}

func (x *Participant) GetAllInPings() int32 {
	if x != nil {
		return x.AllInPings
	}
	return 0
}

func (x *Participant) GetAssistMePings() int32 {
	if x != nil {
		return x.AssistMePings
	}
	return 0
}

func (x *Participant) GetAssists() int32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *Participant) GetBaitPings() int32 {
	if x != nil {
		return x.BaitPings
	}
	return 0
}

func (x *Participant) GetBaronKills() int32 {
	if x != nil {
		return x.BaronKills
	}
	return 0
}

func (x *Participant) GetBasicPings() int32 {
	if x != nil {
		return x.BasicPings
	}
	return 0
}

func (x *Participant) GetBountyLevel() int32 {
	if x != nil {
		return x.BountyLevel
	}
	return 0
}

func (x *Participant) GetChallenges() *Challenges {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *Participant) GetChampExperience() int32 {
	if x != nil {
		return x.ChampExperience
	}
	return 0
}

func (x *Participant) GetChampLevel() int32 {
	if x != nil {
		return x.ChampLevel
	}
	return 0
}

func (x *Participant) GetChampionId() int32 {
	if x != nil {
		return x.ChampionId
	}
	return 0
}

func (x *Participant) GetChampionName() string {
	if x != nil {
		return x.ChampionName
	}
	return ""
}

func (x *Participant) GetChampionTransform() int32 {
	if x != nil {
		return x.ChampionTransform
	}
	return 0
}

func (x *Participant) GetCommandPings() int32 {
	if x != nil {
		return x.CommandPings
	}
	return 0
}

func (x *Participant) GetConsumablesPurchased() int32 {
	if x != nil {
		return x.ConsumablesPurchased
	}
	return 0
}

func (x *Participant) GetDamageDealtToBuildings() int32 {
	if x != nil {
		return x.DamageDealtToBuildings
	}
	return 0
}

func (x *Participant) GetDamageDealtToObjectives() int32 {
	if x != nil {
		return x.DamageDealtToObjectives
	}
	return 0
}

func (x *Participant) GetDamageDealtToTurrets() int32 {
	if x != nil {
		return x.DamageDealtToTurrets
	}
	return 0
}

func (x *Participant) GetDamageSelfMitigated() int32 {
	if x != nil {
		return x.DamageSelfMitigated
	}
	return 0
}

func (x *Participant) GetDangerPings() int32 {
	if x != nil {
		return x.DangerPings
	}
	return 0
}

func (x *Participant) GetDeaths() int32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

func (x *Participant) GetDetectorWardsPlaced() int32 {
	if x != nil {
		return x.DetectorWardsPlaced
	}
	return 0
}

func (x *Participant) GetDoubleKills() int32 {
	if x != nil {
		return x.DoubleKills
	}
	return 0
}

func (x *Participant) GetDragonKills() int32 {
	if x != nil {
		return x.DragonKills
	}
	return 0
}

func (x *Participant) GetEligibleForProgression() bool {
	if x != nil {
		return x.EligibleForProgression
	}
	return false
}

func (x *Participant) GetEnemyMissingPings() int32 {
	if x != nil {
		return x.EnemyMissingPings
	}
	return 0
}

func (x *Participant) GetEnemyVisionPings() int32 {
	if x != nil {
		return x.EnemyVisionPings
	}
	return 0
}

func (x *Participant) GetFirstBloodAssist() bool {
	if x != nil {
		return x.FirstBloodAssist
	}
	return false
}

func (x *Participant) GetFirstBloodKill() bool {
	if x != nil {
		return x.FirstBloodKill
	}
	return false
}

func (x *Participant) GetFirstTowerAssist() bool {
	if x != nil {
		return x.FirstTowerAssist
	}
	return false
}

func (x *Participant) GetFirstTowerKill() bool {
	if x != nil {
		return x.FirstTowerKill
	}
	return false
}

func (x *Participant) GetGameEndedInEarlySurrender() bool {
	if x != nil {
		return x.GameEndedInEarlySurrender
	}
	return false
}

func (x *Participant) GetGameEndedInSurrender() bool {
	if x != nil {
		return x.GameEndedInSurrender
	}
	return false
}

func (x *Participant) GetGetBackPings() int32 {
	if x != nil {
		return x.GetBackPings
	}
	return 0
}

func (x *Participant) GetGoldEarned() int32 {
	if x != nil {
		return x.GoldEarned
	}
	return 0
}

func (x *Participant) GetGoldSpent() int32 {
	if x != nil {
		return x.GoldSpent
	}
	return 0
}

func (x *Participant) GetHoldPings() int32 {
	if x != nil {
		return x.HoldPings
	}
	return 0
}

func (x *Participant) GetIndividualPosition() string {
	if x != nil {
		return x.IndividualPosition
	}
	return ""
}

func (x *Participant) GetInhibitorKills() int32 {
	if x != nil {
		return x.InhibitorKills
	}
	return 0
}

func (x *Participant) GetInhibitorTakedowns() int32 {
	if x != nil {
		return x.InhibitorTakedowns
	}
	return 0
}

func (x *Participant) GetInhibitorsLost() int32 {
	if x != nil {
		return x.InhibitorsLost
	}
	return 0
}

func (x *Participant) GetItem0() int32 {
	if x != nil {
		return x.Item0
	}
	return 0
}

func (x *Participant) GetItem1() int32 {
	if x != nil {
		return x.Item1
	}
	return 0
}

func (x *Participant) GetItem2() int32 {
	if x != nil {
		return x.Item2
	}
	return 0
}

func (x *Participant) GetItem3() int32 {
	if x != nil {
		return x.Item3
	}
	return 0
}

func (x *Participant) GetItem4() int32 {
	if x != nil {
		return x.Item4
	}
	return 0
}

func (x *Participant) GetItem5() int32 {
	if x != nil {
		return x.Item5
	}
	return 0
}

func (x *Participant) GetItem6() int32 {
	if x != nil {
		return x.Item6
	}
	return 0
}

func (x *Participant) GetItemsPurchased() int32 {
	if x != nil {
		return x.ItemsPurchased
	}
	return 0
}

func (x *Participant) GetKillingSprees() int32 {
	if x != nil {
		return x.KillingSprees
	}
	return 0
}

func (x *Participant) GetKills() int32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *Participant) GetLane() string {
	if x != nil {
		return x.Lane
	}
	return ""
}

func (x *Participant) GetLargestCriticalStrike() int32 {
	if x != nil {
		return x.LargestCriticalStrike
	}
	return 0
}

func (x *Participant) GetLargestKillingSpree() int32 {
	if x != nil {
		return x.LargestKillingSpree
	}
	return 0
}

func (x *Participant) GetLargestMultiKill() int32 {
	if x != nil {
		return x.LargestMultiKill
	}
	return 0
}

func (x *Participant) GetLongestTimeSpentLiving() int32 {
	if x != nil {
		return x.LongestTimeSpentLiving
	}
	return 0
}

func (x *Participant) GetMagicDamageDealt() int32 {
	if x != nil {
		return x.MagicDamageDealt
	}
	return 0
}

func (x *Participant) GetMagicDamageDealtToChampions() int32 {
	if x != nil {
		return x.MagicDamageDealtToChampions
	}
	return 0
}

func (x *Participant) GetMagicDamageTaken() int32 {
	if x != nil {
		return x.MagicDamageTaken
	}
	return 0
}

func (x *Participant) GetNeutralMinionsKilled() int32 {
	if x != nil {
		return x.NeutralMinionsKilled
	}
	return 0
}

func (x *Participant) GetNeedVisionPings() int32 {
	if x != nil {
		return x.NeedVisionPings
	}
	return 0
}

func (x *Participant) GetNexusKills() int32 {
	if x != nil {
		return x.NexusKills
	}
	return 0
}

func (x *Participant) GetNexusLost() int32 {
	if x != nil {
		return x.NexusLost
	}
	return 0
}

func (x *Participant) GetNexusTakedowns() int32 {
	if x != nil {
		return x.NexusTakedowns
	}
	return 0
}

func (x *Participant) GetObjectivesStolen() int32 {
	if x != nil {
		return x.ObjectivesStolen
	}
	return 0
}

func (x *Participant) GetObjectivesStolenAssists() int32 {
	if x != nil {
		return x.ObjectivesStolenAssists
	}
	return 0
}

func (x *Participant) GetOnMyWayPings() int32 {
	if x != nil {
		return x.OnMyWayPings
	}
	return 0
}

func (x *Participant) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *Participant) GetPentaKills() int32 {
	if x != nil {
		return x.PentaKills
	}
	return 0
}

func (x *Participant) GetPlayerScore11() int32 {
	if x != nil {
		return x.PlayerScore11
	}
	return 0
}

func (x *Participant) GetPerks() *Perks {
	if x != nil {
		return x.Perks
	}
	return nil
}

func (x *Participant) GetPhysicalDamageDealt() int32 {
	if x != nil {
		return x.PhysicalDamageDealt
	}
	return 0
}

func (x *Participant) GetPhysicalDamageDealtToChampions() int32 {
	if x != nil {
		return x.PhysicalDamageDealtToChampions
	}
	return 0
}

func (x *Participant) GetPhysicalDamageTaken() int32 {
	if x != nil {
		return x.PhysicalDamageTaken
	}
	return 0
}

func (x *Participant) GetPlacement() int32 {
	if x != nil {
		return x.Placement
	}
	return 0
}

func (x *Participant) GetPlayerAugment1() int32 {
	if x != nil {
		return x.PlayerAugment1
	}
	return 0
}

func (x *Participant) GetPlayerAugment2() int32 {
	if x != nil {
		return x.PlayerAugment2
	}
	return 0
}

func (x *Participant) GetPlayerAugment3() int32 {
	if x != nil {
		return x.PlayerAugment3
	}
	return 0
}

func (x *Participant) GetPlayerAugment4() int32 {
	if x != nil {
		return x.PlayerAugment4
	}
	return 0
}

func (x *Participant) GetPlayerSubteamId() int32 {
	if x != nil {
		return x.PlayerSubteamId
	}
	return 0
}

func (x *Participant) GetProfileIcon() int32 {
	if x != nil {
		return x.ProfileIcon
	}
	return 0
}

func (x *Participant) GetPushPings() int32 {
	if x != nil {
		return x.PushPings
	}
	return 0
}

func (x *Participant) GetPuuid() string {
	if x != nil {
		return x.Puuid
	}
	return ""
}

func (x *Participant) GetQuadraKills() int32 {
	if x != nil {
		return x.QuadraKills
	}
	return 0
}

func (x *Participant) GetRiotIdGameName() string {
	if x != nil {
		return x.RiotIdGameName
	}
	return ""
}

func (x *Participant) GetRiotIdTagline() string {
	if x != nil {
		return x.RiotIdTagline
	}
	return ""
}

func (x *Participant) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Participant) GetSightWardsBoughtInGame() int32 {
	if x != nil {
		return x.SightWardsBoughtInGame
	}
	return 0
}

func (x *Participant) GetSpell1Casts() int32 {
	if x != nil {
		return x.Spell1Casts
	}
	return 0
}

func (x *Participant) GetSpell2Casts() int32 {
	if x != nil {
		return x.Spell2Casts
	}
	return 0
}

func (x *Participant) GetSpell3Casts() int32 {
	if x != nil {
		return x.Spell3Casts
	}
	return 0
}

func (x *Participant) GetSpell4Casts() int32 {
	if x != nil {
		return x.Spell4Casts
	}
	return 0
}

func (x *Participant) GetSubteamPlacement() int32 {
	if x != nil {
		return x.SubteamPlacement
	}
	return 0
}

func (x *Participant) GetSummoner1Casts() int32 {
	if x != nil {
		return x.Summoner1Casts
	}
	return 0
}

func (x *Participant) GetSummoner1Id() int32 {
	if x != nil {
		return x.Summoner1Id
	}
	return 0
}

func (x *Participant) GetSummoner2Casts() int32 {
	if x != nil {
		return x.Summoner2Casts
	}
	return 0
}

func (x *Participant) GetSummoner2Id() int32 {
	if x != nil {
		return x.Summoner2Id
	}
	return 0
}

func (x *Participant) GetSummonerId() string {
	if x != nil {
		return x.SummonerId
	}
	return ""
}

func (x *Participant) GetSummonerLevel() int32 {
	if x != nil {
		return x.SummonerLevel
	}
	return 0
}

func (x *Participant) GetSummonerName() string {
	if x != nil {
		return x.SummonerName
	}
	return ""
}

func (x *Participant) GetTeamEarlySurrendered() bool {
	if x != nil {
		return x.TeamEarlySurrendered
	}
	return false
}

func (x *Participant) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *Participant) GetTeamPosition() string {
	if x != nil {
		return x.TeamPosition
	}
	return ""
}

func (x *Participant) GetTimeCCingOthers() int32 {
	if x != nil {
		return x.TimeCCingOthers
	}
	return 0
}

func (x *Participant) GetTimePlayed() int32 {
	if x != nil {
		return x.TimePlayed
	}
	return 0
}

func (x *Participant) GetTotalAllyJungleMinionsKilled() int32 {
	if x != nil {
		return x.TotalAllyJungleMinionsKilled
	}
	return 0
}

func (x *Participant) GetTotalDamageDealt() int32 {
	if x != nil {
		return x.TotalDamageDealt
	}
	return 0
}

func (x *Participant) GetTotalDamageDealtToChampions() int32 {
	if x != nil {
		return x.TotalDamageDealtToChampions
	}
	return 0
}

func (x *Participant) GetTotalDamageShieldedOnTeammates() int32 {
	if x != nil {
		return x.TotalDamageShieldedOnTeammates
	}
	return 0
}

func (x *Participant) GetTotalDamageTaken() int32 {
	if x != nil {
		return x.TotalDamageTaken
	}
	return 0
}

func (x *Participant) GetTotalEnemyJungleMinionsKilled() int32 {
	if x != nil {
		return x.TotalEnemyJungleMinionsKilled
	}
	return 0
}

func (x *Participant) GetTotalHeal() int32 {
	if x != nil {
		return x.TotalHeal
	}
	return 0
}

func (x *Participant) GetTotalHealsOnTeammates() int32 {
	if x != nil {
		return x.TotalHealsOnTeammates
	}
	return 0
}

func (x *Participant) GetTotalMinionsKilled() int32 {
	if x != nil {
		return x.TotalMinionsKilled
	}
	return 0
}

func (x *Participant) GetTotalTimeCCDealt() int32 {
	if x != nil {
		return x.TotalTimeCCDealt
	}
	return 0
}

func (x *Participant) GetTotalTimeSpentDead() int32 {
	if x != nil {
		return x.TotalTimeSpentDead
	}
	return 0
}

func (x *Participant) GetTotalUnitsHealed() int32 {
	if x != nil {
		return x.TotalUnitsHealed
	}
	return 0
}

func (x *Participant) GetTripleKills() int32 {
	if x != nil {
		return x.TripleKills
	}
	return 0
}

func (x *Participant) GetTrueDamageDealt() int32 {
	if x != nil {
		return x.TrueDamageDealt
	}
	return 0
}

func (x *Participant) GetTrueDamageDealtToChampions() int32 {
	if x != nil {
		return x.TrueDamageDealtToChampions
	}
	return 0
}

func (x *Participant) GetTrueDamageTaken() int32 {
	if x != nil {
		return x.TrueDamageTaken
	}
	return 0
}

func (x *Participant) GetTurretKills() int32 {
	if x != nil {
		return x.TurretKills
	}
	return 0
}

func (x *Participant) GetTurretTakedowns() int32 {
	if x != nil {
		return x.TurretTakedowns
	}
	return 0
}

func (x *Participant) GetTurretsLost() int32 {
	if x != nil {
		return x.TurretsLost
	}
	return 0
}

func (x *Participant) GetUnrealKills() int32 {
	if x != nil {
		return x.UnrealKills
	}
	return 0
}

func (x *Participant) GetVisionClearedPings() int32 {
	if x != nil {
		return x.VisionClearedPings
	}
	return 0
}

func (x *Participant) GetVisionScore() int32 {
	if x != nil {
		return x.VisionScore
	}
	return 0
}

func (x *Participant) GetVisionWardsBoughtInGame() int32 {
	if x != nil {
		return x.VisionWardsBoughtInGame
	}
	return 0
}

func (x *Participant) GetWardsKilled() int32 {
	if x != nil {
		return x.WardsKilled
	}
	return 0
}

func (x *Participant) GetWardsPlaced() int32 {
	if x != nil {
		return x.WardsPlaced
	}
	return 0
}

func (x *Participant) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

func (x *Participant) GetMissions() map[string]int32 {
	if x != nil {
		return x.Missions
	}
	return nil
}

func (x *Participant) GetPlayerScore0() int32 {
	if x != nil {
		return x.PlayerScore0
	}
	return 0
}

func (x *Participant) GetPlayerScore1() int32 {
	if x != nil {
		return x.PlayerScore1
	}
	return 0
}

func (x *Participant) GetPlayerScore2() int32 {
	if x != nil {
		return x.PlayerScore2
	}
	return 0
}

func (x *Participant) GetPlayerScore3() int32 {
	if x != nil {
		return x.PlayerScore3
	}
	return 0
}

func (x *Participant) GetPlayerScore4() int32 {
	if x != nil {
		return x.PlayerScore4
	}
	return 0
}

func (x *Participant) GetPlayerScore5() int32 {
	if x != nil {
		return x.PlayerScore5
	}
	return 0
}

func (x *Participant) GetPlayerScore6() int32 {
	if x != nil {
		return x.PlayerScore6
	}
	return 0
}

func (x *Participant) GetPlayerScore7() int32 {
	if x != nil {
		return x.PlayerScore7
	}
	return 0
}

func (x *Participant) GetPlayerScore8() int32 {
	if x != nil {
		return x.PlayerScore8
	}
	return 0
}

func (x *Participant) GetPlayerScore9() int32 {
	if x != nil {
		return x.PlayerScore9
	}
	return 0
}

func (x *Participant) GetPlayerScore10() int32 {
	if x != nil {
		return x.PlayerScore10
	}
	return 0
}

type Challenges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X12AssistStreakCount                     int32   `protobuf:"varint,1,opt,name=_12AssistStreakCount,json=12AssistStreakCount,proto3" json:"_12AssistStreakCount,omitempty"`
	AbilityUses                              int32   `protobuf:"varint,2,opt,name=abilityUses,proto3" json:"abilityUses,omitempty"`
	AcesBefore15Minutes                      int32   `protobuf:"varint,3,opt,name=acesBefore15Minutes,proto3" json:"acesBefore15Minutes,omitempty"`
	AlliedJungleMonsterKills                 int32   `protobuf:"varint,4,opt,name=alliedJungleMonsterKills,proto3" json:"alliedJungleMonsterKills,omitempty"`
	BaronTakedowns                           int32   `protobuf:"varint,5,opt,name=baronTakedowns,proto3" json:"baronTakedowns,omitempty"`
	BlastConeOppositeOpponentCount           int32   `protobuf:"varint,6,opt,name=blastConeOppositeOpponentCount,proto3" json:"blastConeOppositeOpponentCount,omitempty"`
	BountyGold                               int32   `protobuf:"varint,7,opt,name=bountyGold,proto3" json:"bountyGold,omitempty"`
	BuffsStolen                              int32   `protobuf:"varint,8,opt,name=buffsStolen,proto3" json:"buffsStolen,omitempty"`
	CompleteSupportQuestInTime               int32   `protobuf:"varint,9,opt,name=completeSupportQuestInTime,proto3" json:"completeSupportQuestInTime,omitempty"`
	ControlWardsPlaced                       int32   `protobuf:"varint,10,opt,name=controlWardsPlaced,proto3" json:"controlWardsPlaced,omitempty"`
	DamagePerMinute                          float32 `protobuf:"fixed32,11,opt,name=damagePerMinute,proto3" json:"damagePerMinute,omitempty"`
	DamageTakenOnTeamPercentage              float32 `protobuf:"fixed32,12,opt,name=damageTakenOnTeamPercentage,proto3" json:"damageTakenOnTeamPercentage,omitempty"`
	DancedWithRiftHerald                     int32   `protobuf:"varint,13,opt,name=dancedWithRiftHerald,proto3" json:"dancedWithRiftHerald,omitempty"`
	DeathsByEnemyChamps                      int32   `protobuf:"varint,14,opt,name=deathsByEnemyChamps,proto3" json:"deathsByEnemyChamps,omitempty"`
	DodgeSkillShotsSmallWindow               int32   `protobuf:"varint,15,opt,name=dodgeSkillShotsSmallWindow,proto3" json:"dodgeSkillShotsSmallWindow,omitempty"`
	DoubleAces                               int32   `protobuf:"varint,16,opt,name=doubleAces,proto3" json:"doubleAces,omitempty"`
	DragonTakedowns                          int32   `protobuf:"varint,17,opt,name=dragonTakedowns,proto3" json:"dragonTakedowns,omitempty"`
	EffectiveHealAndShielding                float32 `protobuf:"fixed32,18,opt,name=effectiveHealAndShielding,proto3" json:"effectiveHealAndShielding,omitempty"`
	ElderDragonKillsWithOpposingSoul         int32   `protobuf:"varint,19,opt,name=elderDragonKillsWithOpposingSoul,proto3" json:"elderDragonKillsWithOpposingSoul,omitempty"`
	ElderDragonMultikills                    int32   `protobuf:"varint,20,opt,name=elderDragonMultikills,proto3" json:"elderDragonMultikills,omitempty"`
	EnemyChampionImmobilizations             int32   `protobuf:"varint,21,opt,name=enemyChampionImmobilizations,proto3" json:"enemyChampionImmobilizations,omitempty"`
	EnemyJungleMonsterKills                  int32   `protobuf:"varint,22,opt,name=enemyJungleMonsterKills,proto3" json:"enemyJungleMonsterKills,omitempty"`
	EpicMonsterKillsNearEnemyJungler         int32   `protobuf:"varint,23,opt,name=epicMonsterKillsNearEnemyJungler,proto3" json:"epicMonsterKillsNearEnemyJungler,omitempty"`
	EpicMonsterKillsWithin30SecondsOfSpawn   int32   `protobuf:"varint,24,opt,name=epicMonsterKillsWithin30SecondsOfSpawn,proto3" json:"epicMonsterKillsWithin30SecondsOfSpawn,omitempty"`
	EpicMonsterSteals                        int32   `protobuf:"varint,25,opt,name=epicMonsterSteals,proto3" json:"epicMonsterSteals,omitempty"`
	EpicMonsterStolenWithoutSmite            int32   `protobuf:"varint,26,opt,name=epicMonsterStolenWithoutSmite,proto3" json:"epicMonsterStolenWithoutSmite,omitempty"`
	FirstTurretKilled                        int32   `protobuf:"varint,27,opt,name=firstTurretKilled,proto3" json:"firstTurretKilled,omitempty"`
	FlawlessAces                             int32   `protobuf:"varint,28,opt,name=flawlessAces,proto3" json:"flawlessAces,omitempty"`
	FullTeamTakedown                         int32   `protobuf:"varint,29,opt,name=fullTeamTakedown,proto3" json:"fullTeamTakedown,omitempty"`
	GameLength                               float32 `protobuf:"fixed32,30,opt,name=gameLength,proto3" json:"gameLength,omitempty"`
	GetTakedownsInAllLanesEarlyJungleAsLaner int32   `protobuf:"varint,31,opt,name=getTakedownsInAllLanesEarlyJungleAsLaner,proto3" json:"getTakedownsInAllLanesEarlyJungleAsLaner,omitempty"`
	GoldPerMinute                            float32 `protobuf:"fixed32,32,opt,name=goldPerMinute,proto3" json:"goldPerMinute,omitempty"`
	HadOpenNexus                             int32   `protobuf:"varint,33,opt,name=hadOpenNexus,proto3" json:"hadOpenNexus,omitempty"`
	ImmobilizeAndKillWithAlly                int32   `protobuf:"varint,34,opt,name=immobilizeAndKillWithAlly,proto3" json:"immobilizeAndKillWithAlly,omitempty"`
	InitialBuffCount                         int32   `protobuf:"varint,35,opt,name=initialBuffCount,proto3" json:"initialBuffCount,omitempty"`
	InitialCrabCount                         int32   `protobuf:"varint,36,opt,name=initialCrabCount,proto3" json:"initialCrabCount,omitempty"`
	JungleCsBefore10Minutes                  float32 `protobuf:"fixed32,37,opt,name=jungleCsBefore10Minutes,proto3" json:"jungleCsBefore10Minutes,omitempty"`
	JunglerTakedownsNearDamagedEpicMonster   int32   `protobuf:"varint,38,opt,name=junglerTakedownsNearDamagedEpicMonster,proto3" json:"junglerTakedownsNearDamagedEpicMonster,omitempty"`
	KTurretsDestroyedBeforePlatesFall        int32   `protobuf:"varint,39,opt,name=kTurretsDestroyedBeforePlatesFall,proto3" json:"kTurretsDestroyedBeforePlatesFall,omitempty"`
	Kda                                      float32 `protobuf:"fixed32,40,opt,name=kda,proto3" json:"kda,omitempty"`
	KillAfterHiddenWithAlly                  int32   `protobuf:"varint,41,opt,name=killAfterHiddenWithAlly,proto3" json:"killAfterHiddenWithAlly,omitempty"`
	KillParticipation                        float32 `protobuf:"fixed32,42,opt,name=killParticipation,proto3" json:"killParticipation,omitempty"`
	KilledChampTookFullTeamDamageSurvived    int32   `protobuf:"varint,43,opt,name=killedChampTookFullTeamDamageSurvived,proto3" json:"killedChampTookFullTeamDamageSurvived,omitempty"`
	KillingSprees                            int32   `protobuf:"varint,44,opt,name=killingSprees,proto3" json:"killingSprees,omitempty"`
	KillsNearEnemyTurret                     int32   `protobuf:"varint,45,opt,name=killsNearEnemyTurret,proto3" json:"killsNearEnemyTurret,omitempty"`
	KillsOnOtherLanesEarlyJungleAsLaner      int32   `protobuf:"varint,46,opt,name=killsOnOtherLanesEarlyJungleAsLaner,proto3" json:"killsOnOtherLanesEarlyJungleAsLaner,omitempty"`
	KillsOnRecentlyHealedByAramPack          int32   `protobuf:"varint,47,opt,name=killsOnRecentlyHealedByAramPack,proto3" json:"killsOnRecentlyHealedByAramPack,omitempty"`
	KillsUnderOwnTurret                      int32   `protobuf:"varint,48,opt,name=killsUnderOwnTurret,proto3" json:"killsUnderOwnTurret,omitempty"`
	KillsWithHelpFromEpicMonster             int32   `protobuf:"varint,49,opt,name=killsWithHelpFromEpicMonster,proto3" json:"killsWithHelpFromEpicMonster,omitempty"`
	KnockEnemyIntoTeamAndKill                int32   `protobuf:"varint,50,opt,name=knockEnemyIntoTeamAndKill,proto3" json:"knockEnemyIntoTeamAndKill,omitempty"`
	LandSkillShotsEarlyGame                  int32   `protobuf:"varint,51,opt,name=landSkillShotsEarlyGame,proto3" json:"landSkillShotsEarlyGame,omitempty"`
	LaneMinionsFirst10Minutes                int32   `protobuf:"varint,52,opt,name=laneMinionsFirst10Minutes,proto3" json:"laneMinionsFirst10Minutes,omitempty"`
	LegendaryCount                           int32   `protobuf:"varint,53,opt,name=legendaryCount,proto3" json:"legendaryCount,omitempty"`
	LostAnInhibitor                          int32   `protobuf:"varint,54,opt,name=lostAnInhibitor,proto3" json:"lostAnInhibitor,omitempty"`
	MaxKillDeficit                           int32   `protobuf:"varint,55,opt,name=maxKillDeficit,proto3" json:"maxKillDeficit,omitempty"`
	MejaisFullStackInTime                    int32   `protobuf:"varint,56,opt,name=mejaisFullStackInTime,proto3" json:"mejaisFullStackInTime,omitempty"`
	MoreEnemyJungleThanOpponent              float32 `protobuf:"fixed32,57,opt,name=moreEnemyJungleThanOpponent,proto3" json:"moreEnemyJungleThanOpponent,omitempty"`
	MultiKillOneSpell                        int32   `protobuf:"varint,58,opt,name=multiKillOneSpell,proto3" json:"multiKillOneSpell,omitempty"`
	MultiTurretRiftHeraldCount               int32   `protobuf:"varint,59,opt,name=multiTurretRiftHeraldCount,proto3" json:"multiTurretRiftHeraldCount,omitempty"`
	Multikills                               int32   `protobuf:"varint,60,opt,name=multikills,proto3" json:"multikills,omitempty"`
	MultikillsAfterAggressiveFlash           int32   `protobuf:"varint,61,opt,name=multikillsAfterAggressiveFlash,proto3" json:"multikillsAfterAggressiveFlash,omitempty"`
	MythicItemUsed                           int32   `protobuf:"varint,62,opt,name=mythicItemUsed,proto3" json:"mythicItemUsed,omitempty"`
	OuterTurretExecutesBefore10Minutes       int32   `protobuf:"varint,63,opt,name=outerTurretExecutesBefore10Minutes,proto3" json:"outerTurretExecutesBefore10Minutes,omitempty"`
	OutnumberedKills                         int32   `protobuf:"varint,64,opt,name=outnumberedKills,proto3" json:"outnumberedKills,omitempty"`
	OutnumberedNexusKill                     int32   `protobuf:"varint,65,opt,name=outnumberedNexusKill,proto3" json:"outnumberedNexusKill,omitempty"`
	PerfectDragonSoulsTaken                  int32   `protobuf:"varint,66,opt,name=perfectDragonSoulsTaken,proto3" json:"perfectDragonSoulsTaken,omitempty"`
	PerfectGame                              int32   `protobuf:"varint,67,opt,name=perfectGame,proto3" json:"perfectGame,omitempty"`
	PickKillWithAlly                         int32   `protobuf:"varint,68,opt,name=pickKillWithAlly,proto3" json:"pickKillWithAlly,omitempty"`
	PoroExplosions                           int32   `protobuf:"varint,69,opt,name=poroExplosions,proto3" json:"poroExplosions,omitempty"`
	QuickCleanse                             int32   `protobuf:"varint,70,opt,name=quickCleanse,proto3" json:"quickCleanse,omitempty"`
	QuickFirstTurret                         int32   `protobuf:"varint,71,opt,name=quickFirstTurret,proto3" json:"quickFirstTurret,omitempty"`
	QuickSoloKills                           int32   `protobuf:"varint,72,opt,name=quickSoloKills,proto3" json:"quickSoloKills,omitempty"`
	RiftHeraldTakedowns                      int32   `protobuf:"varint,73,opt,name=riftHeraldTakedowns,proto3" json:"riftHeraldTakedowns,omitempty"`
	SaveAllyFromDeath                        int32   `protobuf:"varint,74,opt,name=saveAllyFromDeath,proto3" json:"saveAllyFromDeath,omitempty"`
	ScuttleCrabKills                         int32   `protobuf:"varint,75,opt,name=scuttleCrabKills,proto3" json:"scuttleCrabKills,omitempty"`
	SkillshotsDodged                         int32   `protobuf:"varint,76,opt,name=skillshotsDodged,proto3" json:"skillshotsDodged,omitempty"`
	SkillshotsHit                            int32   `protobuf:"varint,77,opt,name=skillshotsHit,proto3" json:"skillshotsHit,omitempty"`
	SnowballsHit                             int32   `protobuf:"varint,78,opt,name=snowballsHit,proto3" json:"snowballsHit,omitempty"`
	SoloBaronKills                           int32   `protobuf:"varint,79,opt,name=soloBaronKills,proto3" json:"soloBaronKills,omitempty"`
	SoloKills                                int32   `protobuf:"varint,80,opt,name=soloKills,proto3" json:"soloKills,omitempty"`
	StealthWardsPlaced                       int32   `protobuf:"varint,81,opt,name=stealthWardsPlaced,proto3" json:"stealthWardsPlaced,omitempty"`
	SurvivedSingleDigitHpCount               int32   `protobuf:"varint,82,opt,name=survivedSingleDigitHpCount,proto3" json:"survivedSingleDigitHpCount,omitempty"`
	SurvivedThreeImmobilizesInFight          int32   `protobuf:"varint,83,opt,name=survivedThreeImmobilizesInFight,proto3" json:"survivedThreeImmobilizesInFight,omitempty"`
	TakedownOnFirstTurret                    int32   `protobuf:"varint,84,opt,name=takedownOnFirstTurret,proto3" json:"takedownOnFirstTurret,omitempty"`
	Takedowns                                int32   `protobuf:"varint,85,opt,name=takedowns,proto3" json:"takedowns,omitempty"`
	TakedownsAfterGainingLevelAdvantage      int32   `protobuf:"varint,86,opt,name=takedownsAfterGainingLevelAdvantage,proto3" json:"takedownsAfterGainingLevelAdvantage,omitempty"`
	TakedownsBeforeJungleMinionSpawn         int32   `protobuf:"varint,87,opt,name=takedownsBeforeJungleMinionSpawn,proto3" json:"takedownsBeforeJungleMinionSpawn,omitempty"`
	TakedownsFirstXMinutes                   int32   `protobuf:"varint,88,opt,name=takedownsFirstXMinutes,proto3" json:"takedownsFirstXMinutes,omitempty"`
	TakedownsInAlcove                        int32   `protobuf:"varint,89,opt,name=takedownsInAlcove,proto3" json:"takedownsInAlcove,omitempty"`
	TakedownsInEnemyFountain                 int32   `protobuf:"varint,90,opt,name=takedownsInEnemyFountain,proto3" json:"takedownsInEnemyFountain,omitempty"`
	TeamBaronKills                           int32   `protobuf:"varint,91,opt,name=teamBaronKills,proto3" json:"teamBaronKills,omitempty"`
	TeamDamagePercentage                     float32 `protobuf:"fixed32,92,opt,name=teamDamagePercentage,proto3" json:"teamDamagePercentage,omitempty"`
	TeamElderDragonKills                     int32   `protobuf:"varint,93,opt,name=teamElderDragonKills,proto3" json:"teamElderDragonKills,omitempty"`
	TeamRiftHeraldKills                      int32   `protobuf:"varint,94,opt,name=teamRiftHeraldKills,proto3" json:"teamRiftHeraldKills,omitempty"`
	TookLargeDamageSurvived                  int32   `protobuf:"varint,95,opt,name=tookLargeDamageSurvived,proto3" json:"tookLargeDamageSurvived,omitempty"`
	TurretPlatesTaken                        int32   `protobuf:"varint,96,opt,name=turretPlatesTaken,proto3" json:"turretPlatesTaken,omitempty"`
	TurretTakedowns                          int32   `protobuf:"varint,97,opt,name=turretTakedowns,proto3" json:"turretTakedowns,omitempty"`
	TurretsTakenWithRiftHerald               int32   `protobuf:"varint,98,opt,name=turretsTakenWithRiftHerald,proto3" json:"turretsTakenWithRiftHerald,omitempty"`
	TwentyMinionsIn3SecondsCount             int32   `protobuf:"varint,99,opt,name=twentyMinionsIn3SecondsCount,proto3" json:"twentyMinionsIn3SecondsCount,omitempty"`
	TwoWardsOneSweeperCount                  int32   `protobuf:"varint,100,opt,name=twoWardsOneSweeperCount,proto3" json:"twoWardsOneSweeperCount,omitempty"`
	UnseenRecalls                            int32   `protobuf:"varint,101,opt,name=unseenRecalls,proto3" json:"unseenRecalls,omitempty"`
	VisionScorePerMinute                     float32 `protobuf:"fixed32,102,opt,name=visionScorePerMinute,proto3" json:"visionScorePerMinute,omitempty"`
	WardTakedowns                            int32   `protobuf:"varint,103,opt,name=wardTakedowns,proto3" json:"wardTakedowns,omitempty"`
	WardTakedownsBefore20M                   int32   `protobuf:"varint,104,opt,name=wardTakedownsBefore20M,proto3" json:"wardTakedownsBefore20M,omitempty"`
	WardsGuarded                             int32   `protobuf:"varint,105,opt,name=wardsGuarded,proto3" json:"wardsGuarded,omitempty"`
	MaxCsAdvantageOnLaneOpponent             float32 `protobuf:"fixed32,106,opt,name=maxCsAdvantageOnLaneOpponent,proto3" json:"maxCsAdvantageOnLaneOpponent,omitempty"`
	MaxLevelLeadLaneOpponent                 float32 `protobuf:"fixed32,107,opt,name=maxLevelLeadLaneOpponent,proto3" json:"maxLevelLeadLaneOpponent,omitempty"`
}

func (x *Challenges) Reset() {
	*x = Challenges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenges) ProtoMessage() {}

func (x *Challenges) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenges.ProtoReflect.Descriptor instead.
func (*Challenges) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{7}
}

func (x *Challenges) GetX12AssistStreakCount() int32 {
	if x != nil {
		return x.X12AssistStreakCount
	}
	return 0
}

func (x *Challenges) GetAbilityUses() int32 {
	if x != nil {
		return x.AbilityUses
	}
	return 0
}

func (x *Challenges) GetAcesBefore15Minutes() int32 {
	if x != nil {
		return x.AcesBefore15Minutes
	}
	return 0
}

func (x *Challenges) GetAlliedJungleMonsterKills() int32 {
	if x != nil {
		return x.AlliedJungleMonsterKills
	}
	return 0
}

func (x *Challenges) GetBaronTakedowns() int32 {
	if x != nil {
		return x.BaronTakedowns
	}
	return 0
}

func (x *Challenges) GetBlastConeOppositeOpponentCount() int32 {
	if x != nil {
		return x.BlastConeOppositeOpponentCount
	}
	return 0
}

func (x *Challenges) GetBountyGold() int32 {
	if x != nil {
		return x.BountyGold
	}
	return 0
}

func (x *Challenges) GetBuffsStolen() int32 {
	if x != nil {
		return x.BuffsStolen
	}
	return 0
}

func (x *Challenges) GetCompleteSupportQuestInTime() int32 {
	if x != nil {
		return x.CompleteSupportQuestInTime
	}
	return 0
}

func (x *Challenges) GetControlWardsPlaced() int32 {
	if x != nil {
		return x.ControlWardsPlaced
	}
	return 0
}

func (x *Challenges) GetDamagePerMinute() float32 {
	if x != nil {
		return x.DamagePerMinute
	}
	return 0
}

func (x *Challenges) GetDamageTakenOnTeamPercentage() float32 {
	if x != nil {
		return x.DamageTakenOnTeamPercentage
	}
	return 0
}

func (x *Challenges) GetDancedWithRiftHerald() int32 {
	if x != nil {
		return x.DancedWithRiftHerald
	}
	return 0
}

func (x *Challenges) GetDeathsByEnemyChamps() int32 {
	if x != nil {
		return x.DeathsByEnemyChamps
	}
	return 0
}

func (x *Challenges) GetDodgeSkillShotsSmallWindow() int32 {
	if x != nil {
		return x.DodgeSkillShotsSmallWindow
	}
	return 0
}

func (x *Challenges) GetDoubleAces() int32 {
	if x != nil {
		return x.DoubleAces
	}
	return 0
}

func (x *Challenges) GetDragonTakedowns() int32 {
	if x != nil {
		return x.DragonTakedowns
	}
	return 0
}

func (x *Challenges) GetEffectiveHealAndShielding() float32 {
	if x != nil {
		return x.EffectiveHealAndShielding
	}
	return 0
}

func (x *Challenges) GetElderDragonKillsWithOpposingSoul() int32 {
	if x != nil {
		return x.ElderDragonKillsWithOpposingSoul
	}
	return 0
}

func (x *Challenges) GetElderDragonMultikills() int32 {
	if x != nil {
		return x.ElderDragonMultikills
	}
	return 0
}

func (x *Challenges) GetEnemyChampionImmobilizations() int32 {
	if x != nil {
		return x.EnemyChampionImmobilizations
	}
	return 0
}

func (x *Challenges) GetEnemyJungleMonsterKills() int32 {
	if x != nil {
		return x.EnemyJungleMonsterKills
	}
	return 0
}

func (x *Challenges) GetEpicMonsterKillsNearEnemyJungler() int32 {
	if x != nil {
		return x.EpicMonsterKillsNearEnemyJungler
	}
	return 0
}

func (x *Challenges) GetEpicMonsterKillsWithin30SecondsOfSpawn() int32 {
	if x != nil {
		return x.EpicMonsterKillsWithin30SecondsOfSpawn
	}
	return 0
}

func (x *Challenges) GetEpicMonsterSteals() int32 {
	if x != nil {
		return x.EpicMonsterSteals
	}
	return 0
}

func (x *Challenges) GetEpicMonsterStolenWithoutSmite() int32 {
	if x != nil {
		return x.EpicMonsterStolenWithoutSmite
	}
	return 0
}

func (x *Challenges) GetFirstTurretKilled() int32 {
	if x != nil {
		return x.FirstTurretKilled
	}
	return 0
}

func (x *Challenges) GetFlawlessAces() int32 {
	if x != nil {
		return x.FlawlessAces
	}
	return 0
}

func (x *Challenges) GetFullTeamTakedown() int32 {
	if x != nil {
		return x.FullTeamTakedown
	}
	return 0
}

func (x *Challenges) GetGameLength() float32 {
	if x != nil {
		return x.GameLength
	}
	return 0
}

func (x *Challenges) GetGetTakedownsInAllLanesEarlyJungleAsLaner() int32 {
	if x != nil {
		return x.GetTakedownsInAllLanesEarlyJungleAsLaner
	}
	return 0
}

func (x *Challenges) GetGoldPerMinute() float32 {
	if x != nil {
		return x.GoldPerMinute
	}
	return 0
}

func (x *Challenges) GetHadOpenNexus() int32 {
	if x != nil {
		return x.HadOpenNexus
	}
	return 0
}

func (x *Challenges) GetImmobilizeAndKillWithAlly() int32 {
	if x != nil {
		return x.ImmobilizeAndKillWithAlly
	}
	return 0
}

func (x *Challenges) GetInitialBuffCount() int32 {
	if x != nil {
		return x.InitialBuffCount
	}
	return 0
}

func (x *Challenges) GetInitialCrabCount() int32 {
	if x != nil {
		return x.InitialCrabCount
	}
	return 0
}

func (x *Challenges) GetJungleCsBefore10Minutes() float32 {
	if x != nil {
		return x.JungleCsBefore10Minutes
	}
	return 0
}

func (x *Challenges) GetJunglerTakedownsNearDamagedEpicMonster() int32 {
	if x != nil {
		return x.JunglerTakedownsNearDamagedEpicMonster
	}
	return 0
}

func (x *Challenges) GetKTurretsDestroyedBeforePlatesFall() int32 {
	if x != nil {
		return x.KTurretsDestroyedBeforePlatesFall
	}
	return 0
}

func (x *Challenges) GetKda() float32 {
	if x != nil {
		return x.Kda
	}
	return 0
}

func (x *Challenges) GetKillAfterHiddenWithAlly() int32 {
	if x != nil {
		return x.KillAfterHiddenWithAlly
	}
	return 0
}

func (x *Challenges) GetKillParticipation() float32 {
	if x != nil {
		return x.KillParticipation
	}
	return 0
}

func (x *Challenges) GetKilledChampTookFullTeamDamageSurvived() int32 {
	if x != nil {
		return x.KilledChampTookFullTeamDamageSurvived
	}
	return 0
}

func (x *Challenges) GetKillingSprees() int32 {
	if x != nil {
		return x.KillingSprees
	}
	return 0
}

func (x *Challenges) GetKillsNearEnemyTurret() int32 {
	if x != nil {
		return x.KillsNearEnemyTurret
	}
	return 0
}

func (x *Challenges) GetKillsOnOtherLanesEarlyJungleAsLaner() int32 {
	if x != nil {
		return x.KillsOnOtherLanesEarlyJungleAsLaner
	}
	return 0
}

func (x *Challenges) GetKillsOnRecentlyHealedByAramPack() int32 {
	if x != nil {
		return x.KillsOnRecentlyHealedByAramPack
	}
	return 0
}

func (x *Challenges) GetKillsUnderOwnTurret() int32 {
	if x != nil {
		return x.KillsUnderOwnTurret
	}
	return 0
}

func (x *Challenges) GetKillsWithHelpFromEpicMonster() int32 {
	if x != nil {
		return x.KillsWithHelpFromEpicMonster
	}
	return 0
}

func (x *Challenges) GetKnockEnemyIntoTeamAndKill() int32 {
	if x != nil {
		return x.KnockEnemyIntoTeamAndKill
	}
	return 0
}

func (x *Challenges) GetLandSkillShotsEarlyGame() int32 {
	if x != nil {
		return x.LandSkillShotsEarlyGame
	}
	return 0
}

func (x *Challenges) GetLaneMinionsFirst10Minutes() int32 {
	if x != nil {
		return x.LaneMinionsFirst10Minutes
	}
	return 0
}

func (x *Challenges) GetLegendaryCount() int32 {
	if x != nil {
		return x.LegendaryCount
	}
	return 0
}

func (x *Challenges) GetLostAnInhibitor() int32 {
	if x != nil {
		return x.LostAnInhibitor
	}
	return 0
}

func (x *Challenges) GetMaxKillDeficit() int32 {
	if x != nil {
		return x.MaxKillDeficit
	}
	return 0
}

func (x *Challenges) GetMejaisFullStackInTime() int32 {
	if x != nil {
		return x.MejaisFullStackInTime
	}
	return 0
}

func (x *Challenges) GetMoreEnemyJungleThanOpponent() float32 {
	if x != nil {
		return x.MoreEnemyJungleThanOpponent
	}
	return 0
}

func (x *Challenges) GetMultiKillOneSpell() int32 {
	if x != nil {
		return x.MultiKillOneSpell
	}
	return 0
}

func (x *Challenges) GetMultiTurretRiftHeraldCount() int32 {
	if x != nil {
		return x.MultiTurretRiftHeraldCount
	}
	return 0
}

func (x *Challenges) GetMultikills() int32 {
	if x != nil {
		return x.Multikills
	}
	return 0
}

func (x *Challenges) GetMultikillsAfterAggressiveFlash() int32 {
	if x != nil {
		return x.MultikillsAfterAggressiveFlash
	}
	return 0
}

func (x *Challenges) GetMythicItemUsed() int32 {
	if x != nil {
		return x.MythicItemUsed
	}
	return 0
}

func (x *Challenges) GetOuterTurretExecutesBefore10Minutes() int32 {
	if x != nil {
		return x.OuterTurretExecutesBefore10Minutes
	}
	return 0
}

func (x *Challenges) GetOutnumberedKills() int32 {
	if x != nil {
		return x.OutnumberedKills
	}
	return 0
}

func (x *Challenges) GetOutnumberedNexusKill() int32 {
	if x != nil {
		return x.OutnumberedNexusKill
	}
	return 0
}

func (x *Challenges) GetPerfectDragonSoulsTaken() int32 {
	if x != nil {
		return x.PerfectDragonSoulsTaken
	}
	return 0
}

func (x *Challenges) GetPerfectGame() int32 {
	if x != nil {
		return x.PerfectGame
	}
	return 0
}

func (x *Challenges) GetPickKillWithAlly() int32 {
	if x != nil {
		return x.PickKillWithAlly
	}
	return 0
}

func (x *Challenges) GetPoroExplosions() int32 {
	if x != nil {
		return x.PoroExplosions
	}
	return 0
}

func (x *Challenges) GetQuickCleanse() int32 {
	if x != nil {
		return x.QuickCleanse
	}
	return 0
}

func (x *Challenges) GetQuickFirstTurret() int32 {
	if x != nil {
		return x.QuickFirstTurret
	}
	return 0
}

func (x *Challenges) GetQuickSoloKills() int32 {
	if x != nil {
		return x.QuickSoloKills
	}
	return 0
}

func (x *Challenges) GetRiftHeraldTakedowns() int32 {
	if x != nil {
		return x.RiftHeraldTakedowns
	}
	return 0
}

func (x *Challenges) GetSaveAllyFromDeath() int32 {
	if x != nil {
		return x.SaveAllyFromDeath
	}
	return 0
}

func (x *Challenges) GetScuttleCrabKills() int32 {
	if x != nil {
		return x.ScuttleCrabKills
	}
	return 0
}

func (x *Challenges) GetSkillshotsDodged() int32 {
	if x != nil {
		return x.SkillshotsDodged
	}
	return 0
}

func (x *Challenges) GetSkillshotsHit() int32 {
	if x != nil {
		return x.SkillshotsHit
	}
	return 0
}

func (x *Challenges) GetSnowballsHit() int32 {
	if x != nil {
		return x.SnowballsHit
	}
	return 0
}

func (x *Challenges) GetSoloBaronKills() int32 {
	if x != nil {
		return x.SoloBaronKills
	}
	return 0
}

func (x *Challenges) GetSoloKills() int32 {
	if x != nil {
		return x.SoloKills
	}
	return 0
}

func (x *Challenges) GetStealthWardsPlaced() int32 {
	if x != nil {
		return x.StealthWardsPlaced
	}
	return 0
}

func (x *Challenges) GetSurvivedSingleDigitHpCount() int32 {
	if x != nil {
		return x.SurvivedSingleDigitHpCount
	}
	return 0
}

func (x *Challenges) GetSurvivedThreeImmobilizesInFight() int32 {
	if x != nil {
		return x.SurvivedThreeImmobilizesInFight
	}
	return 0
}

func (x *Challenges) GetTakedownOnFirstTurret() int32 {
	if x != nil {
		return x.TakedownOnFirstTurret
	}
	return 0
}

func (x *Challenges) GetTakedowns() int32 {
	if x != nil {
		return x.Takedowns
	}
	return 0
}

func (x *Challenges) GetTakedownsAfterGainingLevelAdvantage() int32 {
	if x != nil {
		return x.TakedownsAfterGainingLevelAdvantage
	}
	return 0
}

func (x *Challenges) GetTakedownsBeforeJungleMinionSpawn() int32 {
	if x != nil {
		return x.TakedownsBeforeJungleMinionSpawn
	}
	return 0
}

func (x *Challenges) GetTakedownsFirstXMinutes() int32 {
	if x != nil {
		return x.TakedownsFirstXMinutes
	}
	return 0
}

func (x *Challenges) GetTakedownsInAlcove() int32 {
	if x != nil {
		return x.TakedownsInAlcove
	}
	return 0
}

func (x *Challenges) GetTakedownsInEnemyFountain() int32 {
	if x != nil {
		return x.TakedownsInEnemyFountain
	}
	return 0
}

func (x *Challenges) GetTeamBaronKills() int32 {
	if x != nil {
		return x.TeamBaronKills
	}
	return 0
}

func (x *Challenges) GetTeamDamagePercentage() float32 {
	if x != nil {
		return x.TeamDamagePercentage
	}
	return 0
}

func (x *Challenges) GetTeamElderDragonKills() int32 {
	if x != nil {
		return x.TeamElderDragonKills
	}
	return 0
}

func (x *Challenges) GetTeamRiftHeraldKills() int32 {
	if x != nil {
		return x.TeamRiftHeraldKills
	}
	return 0
}

func (x *Challenges) GetTookLargeDamageSurvived() int32 {
	if x != nil {
		return x.TookLargeDamageSurvived
	}
	return 0
}

func (x *Challenges) GetTurretPlatesTaken() int32 {
	if x != nil {
		return x.TurretPlatesTaken
	}
	return 0
}

func (x *Challenges) GetTurretTakedowns() int32 {
	if x != nil {
		return x.TurretTakedowns
	}
	return 0
}

func (x *Challenges) GetTurretsTakenWithRiftHerald() int32 {
	if x != nil {
		return x.TurretsTakenWithRiftHerald
	}
	return 0
}

func (x *Challenges) GetTwentyMinionsIn3SecondsCount() int32 {
	if x != nil {
		return x.TwentyMinionsIn3SecondsCount
	}
	return 0
}

func (x *Challenges) GetTwoWardsOneSweeperCount() int32 {
	if x != nil {
		return x.TwoWardsOneSweeperCount
	}
	return 0
}

func (x *Challenges) GetUnseenRecalls() int32 {
	if x != nil {
		return x.UnseenRecalls
	}
	return 0
}

func (x *Challenges) GetVisionScorePerMinute() float32 {
	if x != nil {
		return x.VisionScorePerMinute
	}
	return 0
}

func (x *Challenges) GetWardTakedowns() int32 {
	if x != nil {
		return x.WardTakedowns
	}
	return 0
}

func (x *Challenges) GetWardTakedownsBefore20M() int32 {
	if x != nil {
		return x.WardTakedownsBefore20M
	}
	return 0
}

func (x *Challenges) GetWardsGuarded() int32 {
	if x != nil {
		return x.WardsGuarded
	}
	return 0
}

func (x *Challenges) GetMaxCsAdvantageOnLaneOpponent() float32 {
	if x != nil {
		return x.MaxCsAdvantageOnLaneOpponent
	}
	return 0
}

func (x *Challenges) GetMaxLevelLeadLaneOpponent() float32 {
	if x != nil {
		return x.MaxLevelLeadLaneOpponent
	}
	return 0
}

type Perks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatPerks *PerkStats   `protobuf:"bytes,1,opt,name=statPerks,proto3" json:"statPerks,omitempty"`
	Styles    []*PerkStyle `protobuf:"bytes,2,rep,name=styles,proto3" json:"styles,omitempty"`
}

func (x *Perks) Reset() {
	*x = Perks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Perks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Perks) ProtoMessage() {}

func (x *Perks) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Perks.ProtoReflect.Descriptor instead.
func (*Perks) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{8}
}

func (x *Perks) GetStatPerks() *PerkStats {
	if x != nil {
		return x.StatPerks
	}
	return nil
}

func (x *Perks) GetStyles() []*PerkStyle {
	if x != nil {
		return x.Styles
	}
	return nil
}

type PerkStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Defense int32 `protobuf:"varint,1,opt,name=defense,proto3" json:"defense,omitempty"`
	Flex    int32 `protobuf:"varint,2,opt,name=flex,proto3" json:"flex,omitempty"`
	Offense int32 `protobuf:"varint,3,opt,name=offense,proto3" json:"offense,omitempty"`
}

func (x *PerkStats) Reset() {
	*x = PerkStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerkStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerkStats) ProtoMessage() {}

func (x *PerkStats) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerkStats.ProtoReflect.Descriptor instead.
func (*PerkStats) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{9}
}

func (x *PerkStats) GetDefense() int32 {
	if x != nil {
		return x.Defense
	}
	return 0
}

func (x *PerkStats) GetFlex() int32 {
	if x != nil {
		return x.Flex
	}
	return 0
}

func (x *PerkStats) GetOffense() int32 {
	if x != nil {
		return x.Offense
	}
	return 0
}

type PerkStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string                `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Selections  []*PerkStyleSelection `protobuf:"bytes,2,rep,name=selections,proto3" json:"selections,omitempty"`
	Style       int32                 `protobuf:"varint,3,opt,name=style,proto3" json:"style,omitempty"`
}

func (x *PerkStyle) Reset() {
	*x = PerkStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerkStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerkStyle) ProtoMessage() {}

func (x *PerkStyle) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerkStyle.ProtoReflect.Descriptor instead.
func (*PerkStyle) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{10}
}

func (x *PerkStyle) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PerkStyle) GetSelections() []*PerkStyleSelection {
	if x != nil {
		return x.Selections
	}
	return nil
}

func (x *PerkStyle) GetStyle() int32 {
	if x != nil {
		return x.Style
	}
	return 0
}

type PerkStyleSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perk int32 `protobuf:"varint,1,opt,name=perk,proto3" json:"perk,omitempty"`
	Var1 int32 `protobuf:"varint,2,opt,name=var1,proto3" json:"var1,omitempty"`
	Var2 int32 `protobuf:"varint,3,opt,name=var2,proto3" json:"var2,omitempty"`
	Var3 int32 `protobuf:"varint,4,opt,name=var3,proto3" json:"var3,omitempty"`
}

func (x *PerkStyleSelection) Reset() {
	*x = PerkStyleSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerkStyleSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerkStyleSelection) ProtoMessage() {}

func (x *PerkStyleSelection) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerkStyleSelection.ProtoReflect.Descriptor instead.
func (*PerkStyleSelection) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{11}
}

func (x *PerkStyleSelection) GetPerk() int32 {
	if x != nil {
		return x.Perk
	}
	return 0
}

func (x *PerkStyleSelection) GetVar1() int32 {
	if x != nil {
		return x.Var1
	}
	return 0
}

func (x *PerkStyleSelection) GetVar2() int32 {
	if x != nil {
		return x.Var2
	}
	return 0
}

func (x *PerkStyleSelection) GetVar3() int32 {
	if x != nil {
		return x.Var3
	}
	return 0
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bans       []*Ban      `protobuf:"bytes,1,rep,name=bans,proto3" json:"bans,omitempty"`
	Objectives *Objectives `protobuf:"bytes,2,opt,name=objectives,proto3" json:"objectives,omitempty"`
	TeamId     int32       `protobuf:"varint,3,opt,name=teamId,proto3" json:"teamId,omitempty"`
	Win        bool        `protobuf:"varint,4,opt,name=win,proto3" json:"win,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{12}
}

func (x *Team) GetBans() []*Ban {
	if x != nil {
		return x.Bans
	}
	return nil
}

func (x *Team) GetObjectives() *Objectives {
	if x != nil {
		return x.Objectives
	}
	return nil
}

func (x *Team) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *Team) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

type Ban struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChampionId int32 `protobuf:"varint,1,opt,name=championId,proto3" json:"championId,omitempty"`
	PickTurn   int32 `protobuf:"varint,2,opt,name=pickTurn,proto3" json:"pickTurn,omitempty"`
}

func (x *Ban) Reset() {
	*x = Ban{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ban) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ban) ProtoMessage() {}

func (x *Ban) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ban.ProtoReflect.Descriptor instead.
func (*Ban) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{13}
}

func (x *Ban) GetChampionId() int32 {
	if x != nil {
		return x.ChampionId
	}
	return 0
}

func (x *Ban) GetPickTurn() int32 {
	if x != nil {
		return x.PickTurn
	}
	return 0
}

type Objectives struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Baron      *Objective `protobuf:"bytes,1,opt,name=baron,proto3" json:"baron,omitempty"`
	Champion   *Objective `protobuf:"bytes,2,opt,name=champion,proto3" json:"champion,omitempty"`
	Dragon     *Objective `protobuf:"bytes,3,opt,name=dragon,proto3" json:"dragon,omitempty"`
	Inhibitor  *Objective `protobuf:"bytes,4,opt,name=inhibitor,proto3" json:"inhibitor,omitempty"`
	RiftHerald *Objective `protobuf:"bytes,5,opt,name=riftHerald,proto3" json:"riftHerald,omitempty"`
	Tower      *Objective `protobuf:"bytes,6,opt,name=tower,proto3" json:"tower,omitempty"`
}

func (x *Objectives) Reset() {
	*x = Objectives{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Objectives) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Objectives) ProtoMessage() {}

func (x *Objectives) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Objectives.ProtoReflect.Descriptor instead.
func (*Objectives) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{14}
}

func (x *Objectives) GetBaron() *Objective {
	if x != nil {
		return x.Baron
	}
	return nil
}

func (x *Objectives) GetChampion() *Objective {
	if x != nil {
		return x.Champion
	}
	return nil
}

func (x *Objectives) GetDragon() *Objective {
	if x != nil {
		return x.Dragon
	}
	return nil
}

func (x *Objectives) GetInhibitor() *Objective {
	if x != nil {
		return x.Inhibitor
	}
	return nil
}

func (x *Objectives) GetRiftHerald() *Objective {
	if x != nil {
		return x.RiftHerald
	}
	return nil
}

func (x *Objectives) GetTower() *Objective {
	if x != nil {
		return x.Tower
	}
	return nil
}

type Objective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First bool  `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Kills int32 `protobuf:"varint,2,opt,name=kills,proto3" json:"kills,omitempty"`
}

func (x *Objective) Reset() {
	*x = Objective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_lol_match_v1_match_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Objective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Objective) ProtoMessage() {}

func (x *Objective) ProtoReflect() protoreflect.Message {
	mi := &file_riot_lol_match_v1_match_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Objective.ProtoReflect.Descriptor instead.
func (*Objective) Descriptor() ([]byte, []int) {
	return file_riot_lol_match_v1_match_proto_rawDescGZIP(), []int{15}
}

func (x *Objective) GetFirst() bool {
	if x != nil {
		return x.First
	}
	return false
}

func (x *Objective) GetKills() int32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

var File_riot_lol_match_v1_match_proto protoreflect.FileDescriptor

var file_riot_lol_match_v1_match_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x72, 0x69, 0x6f, 0x74, 0x2f, 0x6c, 0x6f, 0x6c, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x52, 0x69, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x75, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x0e, 0x52, 0x69, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x0c, 0x52, 0x69, 0x6f, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x22, 0x76, 0x0a, 0x09, 0x52, 0x69, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f,
	0x6c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6a, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0xa8, 0x04, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x67, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x69, 0x6f, 0x74,
	0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xde, 0x2d, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x50, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x50, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x69, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x69, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6d, 0x70,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6d, 0x70,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x61, 0x6c, 0x74, 0x54, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c,
	0x74, 0x54, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x17,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c,
	0x74, 0x54, 0x6f, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x6c, 0x66, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x57, 0x61, 0x72,
	0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x16,
	0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x56, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x4b, 0x69,
	0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x6f, 0x77, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x6f, 0x77,
	0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x3c, 0x0a, 0x19, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x65, 0x64, 0x49, 0x6e, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x67, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65,
	0x64, 0x49, 0x6e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x53,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x42,
	0x61, 0x63, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x67, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f,
	0x6c, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68,
	0x6f, 0x6c, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x6f, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x6b,
	0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e,
	0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x6f,
	0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x30, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x30, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x31, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x32, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x33, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x33,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x34, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x35, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x35, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x36, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x36, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x72, 0x65, 0x65, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x72, 0x65, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x74, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6c, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x74, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x70, 0x72, 0x65, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6c,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x72,
	0x65, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x36,
	0x0a, 0x16, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61,
	0x6c, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x12, 0x32, 0x0a, 0x14, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x6f,
	0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e,
	0x65, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x6e, 0x65, 0x78, 0x75, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x64,
	0x6f, 0x77, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x53, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x6c, 0x65, 0x6e,
	0x12, 0x38, 0x0a, 0x17, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x53, 0x74,
	0x6f, 0x6c, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x53, 0x74, 0x6f,
	0x6c, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e,
	0x4d, 0x79, 0x57, 0x61, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6f, 0x6e, 0x4d, 0x79, 0x57, 0x61, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x6e, 0x74, 0x61, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x6e, 0x74, 0x61, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x31, 0x31, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x31, 0x31, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x65,
	0x72, 0x6b, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6f, 0x74,
	0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x72, 0x6b, 0x73, 0x52, 0x05, 0x70, 0x65, 0x72, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c,
	0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x1e,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x31, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x31, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x18, 0x4d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x33, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x33, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x34, 0x18, 0x4f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x34, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x51, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x52, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x75, 0x75, 0x69, 0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x54, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x64, 0x72,
	0x61, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x69, 0x6f, 0x74, 0x49, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x69, 0x6f, 0x74, 0x49, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x69, 0x6f, 0x74, 0x49, 0x64, 0x54, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x69, 0x6f, 0x74, 0x49, 0x64, 0x54, 0x61, 0x67,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x57, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x57, 0x61, 0x72, 0x64, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x18, 0x58, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x69, 0x67, 0x68, 0x74, 0x57,
	0x61, 0x72, 0x64, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x31, 0x43, 0x61, 0x73, 0x74, 0x73, 0x18,
	0x59, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x31, 0x43, 0x61, 0x73,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x32, 0x43, 0x61, 0x73, 0x74,
	0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x32, 0x43,
	0x61, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x33, 0x43, 0x61,
	0x73, 0x74, 0x73, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c,
	0x33, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x34,
	0x43, 0x61, 0x73, 0x74, 0x73, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x70, 0x65,
	0x6c, 0x6c, 0x34, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x74,
	0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x5d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x73, 0x75, 0x62, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72,
	0x31, 0x43, 0x61, 0x73, 0x74, 0x73, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75,
	0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x31, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x31, 0x49, 0x64, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x31, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x32, 0x43, 0x61, 0x73, 0x74, 0x73,
	0x18, 0x60, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72,
	0x32, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e,
	0x65, 0x72, 0x32, 0x49, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x6d,
	0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x32, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x6d, 0x6d,
	0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75,
	0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x6d, 0x6d,
	0x6f, 0x6e, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x43, 0x69, 0x6e, 0x67, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x43, 0x69, 0x6e, 0x67, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x79, 0x4a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x61, 0x6c, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x1b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74,
	0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46,
	0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x65, 0x64, 0x4f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x6d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x4f, 0x6e, 0x54, 0x65, 0x61,
	0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x65, 0x6d, 0x79,
	0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x45, 0x6e, 0x65, 0x6d, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f,
	0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x48, 0x65, 0x61, 0x6c, 0x18, 0x70, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48,
	0x65, 0x61, 0x6c, 0x73, 0x4f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x72, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c,
	0x73, 0x4f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x73, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x43, 0x44, 0x65, 0x61, 0x6c, 0x74,
	0x18, 0x74, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x43, 0x43, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x70, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x18, 0x76, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x48, 0x65,
	0x61, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x77, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x70, 0x6c,
	0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74,
	0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x79,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x6b, 0x65, 0x6e, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x65, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x75,
	0x72, 0x72, 0x65, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18,
	0x7c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x54, 0x61, 0x6b,
	0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74,
	0x73, 0x4c, 0x6f, 0x73, 0x74, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x75, 0x72,
	0x72, 0x65, 0x74, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x7f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a,
	0x17, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x64, 0x73, 0x42, 0x6f, 0x75, 0x67,
	0x68, 0x74, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x64, 0x73, 0x42, 0x6f, 0x75, 0x67,
	0x68, 0x74, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x11,
	0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69,
	0x6e, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x85, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x30, 0x18, 0x86, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x30, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x31, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x31, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x32, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x32, 0x12, 0x23, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x33, 0x18, 0x89, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x33,
	0x12, 0x23, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x34,
	0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x34, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x35, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x35, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x36, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x36, 0x12,
	0x23, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x37, 0x18,
	0x8d, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x37, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x38, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x38, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x39, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x39, 0x12, 0x25,
	0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x31, 0x30, 0x18,
	0x90, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x31, 0x30, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x9b, 0x2c, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x14, 0x5f, 0x31, 0x32, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x31, 0x32, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x55, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x63, 0x65, 0x73, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x31, 0x35, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x63, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x31,
	0x35, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x69,
	0x65, 0x64, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x69,
	0x65, 0x64, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x54, 0x61, 0x6b,
	0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x61,
	0x72, 0x6f, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x1e,
	0x62, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x65, 0x4f,
	0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x47, 0x6f,
	0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x47, 0x6f, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x73, 0x53, 0x74, 0x6f,
	0x6c, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x73,
	0x53, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x57, 0x61, 0x72, 0x64, 0x73,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x12, 0x40, 0x0a, 0x1b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x4f,
	0x6e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x4f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x52, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x52, 0x69, 0x66, 0x74,
	0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73,
	0x42, 0x79, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x65,
	0x6d, 0x79, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x64, 0x6f, 0x64, 0x67,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x74, 0x73, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x64, 0x6f,
	0x64, 0x67, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x74, 0x73, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x41, 0x63, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48,
	0x65, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x48, 0x65, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x4a, 0x0a, 0x20, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x53, 0x6f, 0x75, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x65, 0x6c, 0x64, 0x65,
	0x72, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x6c, 0x12, 0x34, 0x0a, 0x15,
	0x65, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x65, 0x6c, 0x64,
	0x65, 0x72, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x43, 0x68, 0x61, 0x6d, 0x70,
	0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x43,
	0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x4a, 0x0a, 0x20, 0x65, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x4e, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x4a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x65, 0x70, 0x69, 0x63,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x4e, 0x65, 0x61, 0x72,
	0x45, 0x6e, 0x65, 0x6d, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x26,
	0x65, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x33, 0x30, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4f,
	0x66, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x65, 0x70,
	0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x69, 0x6e, 0x33, 0x30, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4f, 0x66, 0x53,
	0x70, 0x61, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x65, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61,
	0x6c, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x65, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x6d,
	0x69, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x65, 0x70, 0x69, 0x63, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x53, 0x6d, 0x69, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74,
	0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x77, 0x6c, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6c,
	0x61, 0x77, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x75,
	0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x61,
	0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x28, 0x67, 0x65, 0x74, 0x54, 0x61, 0x6b,
	0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x49, 0x6e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x65, 0x73,
	0x45, 0x61, 0x72, 0x6c, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x73, 0x4c, 0x61, 0x6e,
	0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28, 0x67, 0x65, 0x74, 0x54, 0x61, 0x6b,
	0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x49, 0x6e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x65, 0x73,
	0x45, 0x61, 0x72, 0x6c, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x73, 0x4c, 0x61, 0x6e,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x50,
	0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x64, 0x4f,
	0x70, 0x65, 0x6e, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x68, 0x61, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x19,
	0x69, 0x6d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x6e, 0x64, 0x4b, 0x69, 0x6c,
	0x6c, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x19, 0x69, 0x6d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x6e, 0x64, 0x4b, 0x69,
	0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x66,
	0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x43, 0x72, 0x61, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x61, 0x62, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x73, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x31, 0x30, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x17, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x73, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x31, 0x30, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x26,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x4e, 0x65, 0x61, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x45, 0x70, 0x69, 0x63, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x4e, 0x65,
	0x61, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x45, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x21, 0x6b, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x46, 0x61, 0x6c, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x21, 0x6b, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x46, 0x61,
	0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x64, 0x61, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x6b, 0x64, 0x61, 0x12, 0x38, 0x0a, 0x17, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x79, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x79, 0x12, 0x2c,
	0x0a, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x25,
	0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x54, 0x6f, 0x6f, 0x6b, 0x46,
	0x75, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x75, 0x72,
	0x76, 0x69, 0x76, 0x65, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x6b, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x54, 0x6f, 0x6f, 0x6b, 0x46, 0x75, 0x6c, 0x6c,
	0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x72,
	0x65, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x70, 0x72, 0x65, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x4e, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4e, 0x65, 0x61,
	0x72, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x23,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4f, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x65,
	0x73, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x73, 0x4c, 0x61,
	0x6e, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x4f, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x65, 0x73, 0x45, 0x61, 0x72, 0x6c,
	0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x73, 0x4c, 0x61, 0x6e, 0x65, 0x72, 0x12, 0x48,
	0x0a, 0x1f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x41, 0x72, 0x61, 0x6d, 0x50, 0x61, 0x63,
	0x6b, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4f, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x42, 0x79,
	0x41, 0x72, 0x61, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x4f, 0x77, 0x6e, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x65, 0x6c, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x45,
	0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1c, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x65, 0x6c, 0x70, 0x46,
	0x72, 0x6f, 0x6d, 0x45, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3c,
	0x0a, 0x19, 0x6b, 0x6e, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x49, 0x6e, 0x74, 0x6f,
	0x54, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x6b, 0x6e, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x49, 0x6e, 0x74,
	0x6f, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x17,
	0x6c, 0x61, 0x6e, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x74, 0x73, 0x45, 0x61,
	0x72, 0x6c, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6c,
	0x61, 0x6e, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x74, 0x73, 0x45, 0x61, 0x72,
	0x6c, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x69,
	0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x31, 0x30, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6c, 0x61, 0x6e, 0x65, 0x4d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x31, 0x30, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x65,
	0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x6c, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x49, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x49, 0x6e, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x4b, 0x69, 0x6c,
	0x6c, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x4b, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x63, 0x69, 0x74, 0x12, 0x34,
	0x0a, 0x15, 0x6d, 0x65, 0x6a, 0x61, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d,
	0x65, 0x6a, 0x61, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x6d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x65, 0x6d,
	0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x70, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x6d, 0x6f, 0x72, 0x65, 0x45,
	0x6e, 0x65, 0x6d, 0x79, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x70,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4b,
	0x69, 0x6c, 0x6c, 0x4f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x4f, 0x6e, 0x65, 0x53,
	0x70, 0x65, 0x6c, 0x6c, 0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x75, 0x72,
	0x72, 0x65, 0x74, 0x52, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x54,
	0x75, 0x72, 0x72, 0x65, 0x74, 0x52, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x64, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x22, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x75, 0x72,
	0x72, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x31, 0x30, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x22, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x31, 0x30, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x65, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x6f, 0x75, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x32, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x4e,
	0x65, 0x78, 0x75, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x6f, 0x75, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x75, 0x73,
	0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x44,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x6c, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18,
	0x42, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x44, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x6c, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x69, 0x63, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x41, 0x6c, 0x6c, 0x79, 0x18, 0x44, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x69, 0x63, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x6f, 0x72, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x73, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x75,
	0x72, 0x72, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x6f, 0x6c,
	0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x71, 0x75,
	0x69, 0x63, 0x6b, 0x53, 0x6f, 0x6c, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x72, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x69, 0x66, 0x74, 0x48,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x61, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65,
	0x61, 0x74, 0x68, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x61, 0x76, 0x65, 0x41,
	0x6c, 0x6c, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x63, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x72, 0x61, 0x62, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x63, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x43,
	0x72, 0x61, 0x62, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x44, 0x6f, 0x64, 0x67, 0x65, 0x64, 0x18, 0x4c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x44, 0x6f,
	0x64, 0x67, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x48, 0x69, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x48, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e,
	0x6f, 0x77, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x69, 0x74, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x69, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x6f, 0x6c, 0x6f, 0x42, 0x61, 0x72, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x4f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x6f, 0x6c, 0x6f, 0x42, 0x61, 0x72, 0x6f,
	0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x6f, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x6f, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x57,
	0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x64,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x48, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76,
	0x65, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x48, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x1f, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x64,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x49, 0x6d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x73,
	0x49, 0x6e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x73,
	0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x65, 0x49, 0x6d, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x73, 0x49, 0x6e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x12, 0x34,
	0x0a, 0x15, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x4f, 0x6e, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x18, 0x54, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74,
	0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x4f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x75,
	0x72, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x18, 0x55, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x47, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x23, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x47,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x57, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20,
	0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x77, 0x6e,
	0x12, 0x36, 0x0a, 0x16, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x58, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x58, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x58, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x61, 0x6b, 0x65,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x49, 0x6e, 0x41, 0x6c, 0x63, 0x6f, 0x76, 0x65, 0x18, 0x59, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x49, 0x6e,
	0x41, 0x6c, 0x63, 0x6f, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x49, 0x6e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x49, 0x6e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x72, 0x6f, 0x6e, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d,
	0x42, 0x61, 0x72, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x65,
	0x61, 0x6d, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x69, 0x66, 0x74, 0x48, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x6f, 0x6f, 0x6b, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x5f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x74, 0x6f, 0x6f, 0x6b, 0x4c, 0x61, 0x72, 0x67, 0x65,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x61,
	0x6b, 0x65, 0x6e, 0x18, 0x60, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x75, 0x72, 0x72, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18,
	0x61, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x54, 0x61, 0x6b,
	0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74,
	0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x69, 0x66, 0x74, 0x48, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x74, 0x75, 0x72, 0x72,
	0x65, 0x74, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x69, 0x66, 0x74,
	0x48, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x74, 0x77, 0x65, 0x6e, 0x74, 0x79,
	0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x33, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x74, 0x77,
	0x65, 0x6e, 0x74, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x33, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x77,
	0x6f, 0x57, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x6e, 0x65, 0x53, 0x77, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x74, 0x77, 0x6f,
	0x57, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x6e, 0x65, 0x53, 0x77, 0x65, 0x65, 0x70, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x73, 0x65, 0x65, 0x6e, 0x52, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x73,
	0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x64,
	0x6f, 0x77, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x32, 0x30, 0x4d, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x32, 0x30, 0x4d, 0x12, 0x22, 0x0a, 0x0c,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x47, 0x75, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x64, 0x73, 0x47, 0x75, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x12, 0x42, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x43, 0x73, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x4f, 0x6e, 0x4c, 0x61, 0x6e, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c, 0x6d, 0x61, 0x78, 0x43, 0x73, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x4c, 0x61, 0x6e, 0x65, 0x4f, 0x70, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x4c, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x6e, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x6b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x4c, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x6e, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x22, 0x79, 0x0a, 0x05, 0x50, 0x65, 0x72, 0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x50, 0x65, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72,
	0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x50, 0x65, 0x72, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6b, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x09, 0x50,
	0x65, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x66, 0x6c, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x22, 0x8a, 0x01, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6b, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x64, 0x0a,
	0x12, 0x50, 0x65, 0x72, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x31, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x61, 0x72, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x61, 0x72, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x61, 0x72, 0x32, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76,
	0x61, 0x72, 0x33, 0x22, 0x9b, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x04,
	0x62, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x6f,
	0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x6e, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72,
	0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69,
	0x6e, 0x22, 0x41, 0x0a, 0x03, 0x42, 0x61, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6d,
	0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x6b,
	0x54, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x69, 0x63, 0x6b,
	0x54, 0x75, 0x72, 0x6e, 0x22, 0xde, 0x02, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6f, 0x74,
	0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x06, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x6e, 0x68, 0x69, 0x62,
	0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6f,
	0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x6c,
	0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x72, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x37, 0x0a, 0x09, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x32, 0xad,
	0x01, 0x0a, 0x10, 0x52, 0x69, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x50, 0x75, 0x75, 0x69, 0x64, 0x12, 0x24, 0x2e, 0x72,
	0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x69, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x75, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x73, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x21, 0x2e, 0x72, 0x69,
	0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x69, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x6c, 0x6f, 0x6c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x00, 0x42, 0x22,
	0x5a, 0x20, 0x6d, 0x65, 0x65, 0x70, 0x2e, 0x67, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x72, 0x69, 0x6f, 0x74, 0x2f, 0x6c, 0x6f, 0x6c, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_riot_lol_match_v1_match_proto_rawDescOnce sync.Once
	file_riot_lol_match_v1_match_proto_rawDescData = file_riot_lol_match_v1_match_proto_rawDesc
)

func file_riot_lol_match_v1_match_proto_rawDescGZIP() []byte {
	file_riot_lol_match_v1_match_proto_rawDescOnce.Do(func() {
		file_riot_lol_match_v1_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_riot_lol_match_v1_match_proto_rawDescData)
	})
	return file_riot_lol_match_v1_match_proto_rawDescData
}

var file_riot_lol_match_v1_match_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_riot_lol_match_v1_match_proto_goTypes = []interface{}{
	(*RiotMatchPuuidReq)(nil),  // 0: riot.lol.match.v1.RiotMatchPuuidReq
	(*RiotMatchIdReq)(nil),     // 1: riot.lol.match.v1.RiotMatchIdReq
	(*RiotMatchIds)(nil),       // 2: riot.lol.match.v1.RiotMatchIds
	(*RiotMatch)(nil),          // 3: riot.lol.match.v1.RiotMatch
	(*Metadata)(nil),           // 4: riot.lol.match.v1.Metadata
	(*MatchInfo)(nil),          // 5: riot.lol.match.v1.MatchInfo
	(*Participant)(nil),        // 6: riot.lol.match.v1.Participant
	(*Challenges)(nil),         // 7: riot.lol.match.v1.Challenges
	(*Perks)(nil),              // 8: riot.lol.match.v1.Perks
	(*PerkStats)(nil),          // 9: riot.lol.match.v1.PerkStats
	(*PerkStyle)(nil),          // 10: riot.lol.match.v1.PerkStyle
	(*PerkStyleSelection)(nil), // 11: riot.lol.match.v1.PerkStyleSelection
	(*Team)(nil),               // 12: riot.lol.match.v1.Team
	(*Ban)(nil),                // 13: riot.lol.match.v1.Ban
	(*Objectives)(nil),         // 14: riot.lol.match.v1.Objectives
	(*Objective)(nil),          // 15: riot.lol.match.v1.Objective
	nil,                        // 16: riot.lol.match.v1.Participant.MissionsEntry
}
var file_riot_lol_match_v1_match_proto_depIdxs = []int32{
	4,  // 0: riot.lol.match.v1.RiotMatch.metadata:type_name -> riot.lol.match.v1.Metadata
	5,  // 1: riot.lol.match.v1.RiotMatch.info:type_name -> riot.lol.match.v1.MatchInfo
	6,  // 2: riot.lol.match.v1.MatchInfo.participants:type_name -> riot.lol.match.v1.Participant
	12, // 3: riot.lol.match.v1.MatchInfo.teams:type_name -> riot.lol.match.v1.Team
	7,  // 4: riot.lol.match.v1.Participant.challenges:type_name -> riot.lol.match.v1.Challenges
	8,  // 5: riot.lol.match.v1.Participant.perks:type_name -> riot.lol.match.v1.Perks
	16, // 6: riot.lol.match.v1.Participant.missions:type_name -> riot.lol.match.v1.Participant.MissionsEntry
	9,  // 7: riot.lol.match.v1.Perks.statPerks:type_name -> riot.lol.match.v1.PerkStats
	10, // 8: riot.lol.match.v1.Perks.styles:type_name -> riot.lol.match.v1.PerkStyle
	11, // 9: riot.lol.match.v1.PerkStyle.selections:type_name -> riot.lol.match.v1.PerkStyleSelection
	13, // 10: riot.lol.match.v1.Team.bans:type_name -> riot.lol.match.v1.Ban
	14, // 11: riot.lol.match.v1.Team.objectives:type_name -> riot.lol.match.v1.Objectives
	15, // 12: riot.lol.match.v1.Objectives.baron:type_name -> riot.lol.match.v1.Objective
	15, // 13: riot.lol.match.v1.Objectives.champion:type_name -> riot.lol.match.v1.Objective
	15, // 14: riot.lol.match.v1.Objectives.dragon:type_name -> riot.lol.match.v1.Objective
	15, // 15: riot.lol.match.v1.Objectives.inhibitor:type_name -> riot.lol.match.v1.Objective
	15, // 16: riot.lol.match.v1.Objectives.riftHerald:type_name -> riot.lol.match.v1.Objective
	15, // 17: riot.lol.match.v1.Objectives.tower:type_name -> riot.lol.match.v1.Objective
	0,  // 18: riot.lol.match.v1.RiotMatchService.Puuid:input_type -> riot.lol.match.v1.RiotMatchPuuidReq
	1,  // 19: riot.lol.match.v1.RiotMatchService.Id:input_type -> riot.lol.match.v1.RiotMatchIdReq
	2,  // 20: riot.lol.match.v1.RiotMatchService.Puuid:output_type -> riot.lol.match.v1.RiotMatchIds
	3,  // 21: riot.lol.match.v1.RiotMatchService.Id:output_type -> riot.lol.match.v1.RiotMatch
	20, // [20:22] is the sub-list for method output_type
	18, // [18:20] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_riot_lol_match_v1_match_proto_init() }
func file_riot_lol_match_v1_match_proto_init() {
	if File_riot_lol_match_v1_match_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_riot_lol_match_v1_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiotMatchPuuidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiotMatchIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiotMatchIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiotMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Perks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerkStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerkStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerkStyleSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ban); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Objectives); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_lol_match_v1_match_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Objective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_riot_lol_match_v1_match_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_riot_lol_match_v1_match_proto_goTypes,
		DependencyIndexes: file_riot_lol_match_v1_match_proto_depIdxs,
		MessageInfos:      file_riot_lol_match_v1_match_proto_msgTypes,
	}.Build()
	File_riot_lol_match_v1_match_proto = out.File
	file_riot_lol_match_v1_match_proto_rawDesc = nil
	file_riot_lol_match_v1_match_proto_goTypes = nil
	file_riot_lol_match_v1_match_proto_depIdxs = nil
}
