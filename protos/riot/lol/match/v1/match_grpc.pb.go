// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: riot/lol/match/v1/match.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RiotMatchServiceClient is the client API for RiotMatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiotMatchServiceClient interface {
	Puuid(ctx context.Context, in *RiotMatchPuuidReq, opts ...grpc.CallOption) (*RiotMatchIds, error)
	Id(ctx context.Context, in *RiotMatchIdReq, opts ...grpc.CallOption) (*RiotMatch, error)
}

type riotMatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiotMatchServiceClient(cc grpc.ClientConnInterface) RiotMatchServiceClient {
	return &riotMatchServiceClient{cc}
}

func (c *riotMatchServiceClient) Puuid(ctx context.Context, in *RiotMatchPuuidReq, opts ...grpc.CallOption) (*RiotMatchIds, error) {
	out := new(RiotMatchIds)
	err := c.cc.Invoke(ctx, "/riot.lol.match.v1.RiotMatchService/Puuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotMatchServiceClient) Id(ctx context.Context, in *RiotMatchIdReq, opts ...grpc.CallOption) (*RiotMatch, error) {
	out := new(RiotMatch)
	err := c.cc.Invoke(ctx, "/riot.lol.match.v1.RiotMatchService/Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiotMatchServiceServer is the server API for RiotMatchService service.
// All implementations must embed UnimplementedRiotMatchServiceServer
// for forward compatibility
type RiotMatchServiceServer interface {
	Puuid(context.Context, *RiotMatchPuuidReq) (*RiotMatchIds, error)
	Id(context.Context, *RiotMatchIdReq) (*RiotMatch, error)
	mustEmbedUnimplementedRiotMatchServiceServer()
}

// UnimplementedRiotMatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRiotMatchServiceServer struct {
}

func (UnimplementedRiotMatchServiceServer) Puuid(context.Context, *RiotMatchPuuidReq) (*RiotMatchIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Puuid not implemented")
}
func (UnimplementedRiotMatchServiceServer) Id(context.Context, *RiotMatchIdReq) (*RiotMatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Id not implemented")
}
func (UnimplementedRiotMatchServiceServer) mustEmbedUnimplementedRiotMatchServiceServer() {}

// UnsafeRiotMatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiotMatchServiceServer will
// result in compilation errors.
type UnsafeRiotMatchServiceServer interface {
	mustEmbedUnimplementedRiotMatchServiceServer()
}

func RegisterRiotMatchServiceServer(s grpc.ServiceRegistrar, srv RiotMatchServiceServer) {
	s.RegisterService(&RiotMatchService_ServiceDesc, srv)
}

func _RiotMatchService_Puuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiotMatchPuuidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotMatchServiceServer).Puuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/riot.lol.match.v1.RiotMatchService/Puuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotMatchServiceServer).Puuid(ctx, req.(*RiotMatchPuuidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotMatchService_Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiotMatchIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotMatchServiceServer).Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/riot.lol.match.v1.RiotMatchService/Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotMatchServiceServer).Id(ctx, req.(*RiotMatchIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RiotMatchService_ServiceDesc is the grpc.ServiceDesc for RiotMatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiotMatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "riot.lol.match.v1.RiotMatchService",
	HandlerType: (*RiotMatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Puuid",
			Handler:    _RiotMatchService_Puuid_Handler,
		},
		{
			MethodName: "Id",
			Handler:    _RiotMatchService_Id_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "riot/lol/match/v1/match.proto",
}
